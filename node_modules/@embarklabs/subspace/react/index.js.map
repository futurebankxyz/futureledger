{"version":3,"sources":["../src/react/index.js"],"names":["React","Component","isObservable","observe","WrappedComponent","observedValues","subscriptions","prop","state","unsubscribe","setState","props","subscription","subscribe","value","err","console","error","subscribeToProp","prevProps","accum","curr","createElement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { isObservable } from \"rxjs\";\n\nexport function observe(WrappedComponent) {\n  return class extends Component {\n    state = {\n      observedValues: {},\n      subscriptions: {}\n    };\n\n    unsubscribe = prop => {\n      const subscriptions = { ...this.state.subscriptions };\n      if (subscriptions[prop]) subscriptions[prop].unsubscribe();\n      delete subscriptions[prop];\n\n      this.setState({ subscriptions });\n    };\n\n    subscribeToProp = prop => {\n      if (!isObservable(this.props[prop])) return;\n\n      const subscription = this.props[prop].subscribe(\n        value => {\n          this.setState(state => ({\n            observedValues: {\n              ...state.observedValues,\n              [prop]: value\n            }\n          }));\n        },\n        err => {\n          // TODO: pass the error to the wrapped component\n          console.error(err);\n        }\n      );\n\n      this.setState({\n        subscriptions: {\n          ...this.state.subscriptions,\n          [prop]: subscription\n        }\n      });\n    };\n\n    componentDidMount() {\n      Object.keys(this.props).forEach(this.subscribeToProp);\n    }\n\n    componentWillUnmount() {\n      Object.keys(this.state.subscriptions).forEach(subscription => {\n        this.unsubscribe(subscription);\n      });\n    }\n\n    componentDidUpdate(prevProps) {\n      Object.keys(prevProps).forEach(prop => {\n        if (!prevProps[prop] && this.props[prop]) {\n          this.subscribeToProp(prop);\n        } else if (prevProps[prop] !== this.props[prop]) {\n          this.unsubscribe(prop);\n          this.subscribeToProp(prop);\n        }\n      });\n    }\n\n    render() {\n      const props = Object.keys(this.props).reduce((accum, curr) => {\n        if (!isObservable(this.props[curr])) {\n          accum[curr] = this.props[curr];\n          return accum;\n        }\n        return accum;\n      }, {});\n\n      return React.createElement(WrappedComponent, {\n        ...props,\n        ...this.state.observedValues\n      });\n    }\n  };\n}\n"],"file":"index.js"}