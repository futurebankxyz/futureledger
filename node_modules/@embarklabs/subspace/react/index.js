import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/esm/inherits";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source), true)).call(_context6, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context7; _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { Component } from "react";
import { isObservable } from "rxjs";
export function observe(WrappedComponent) {
  var _temp;

  return _temp =
  /*#__PURE__*/
  function (_Component) {
    _inherits(_temp, _Component);

    function _temp() {
      var _getPrototypeOf2, _context;

      var _this;

      _classCallCheck(this, _temp);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_temp)).call.apply(_getPrototypeOf2, _concatInstanceProperty(_context = [this]).call(_context, args)));

      _defineProperty(_assertThisInitialized(_this), "state", {
        observedValues: {},
        subscriptions: {}
      });

      _defineProperty(_assertThisInitialized(_this), "unsubscribe", function (prop) {
        var subscriptions = _objectSpread({}, _this.state.subscriptions);

        if (subscriptions[prop]) subscriptions[prop].unsubscribe();
        delete subscriptions[prop];

        _this.setState({
          subscriptions: subscriptions
        });
      });

      _defineProperty(_assertThisInitialized(_this), "subscribeToProp", function (prop) {
        if (!isObservable(_this.props[prop])) return;

        var subscription = _this.props[prop].subscribe(function (value) {
          _this.setState(function (state) {
            return {
              observedValues: _objectSpread({}, state.observedValues, _defineProperty({}, prop, value))
            };
          });
        }, function (err) {
          // TODO: pass the error to the wrapped component
          console.error(err);
        });

        _this.setState({
          subscriptions: _objectSpread({}, _this.state.subscriptions, _defineProperty({}, prop, subscription))
        });
      });

      return _this;
    }

    _createClass(_temp, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _context2;

        _forEachInstanceProperty(_context2 = _Object$keys(this.props)).call(_context2, this.subscribeToProp);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _context3,
            _this2 = this;

        _forEachInstanceProperty(_context3 = _Object$keys(this.state.subscriptions)).call(_context3, function (subscription) {
          _this2.unsubscribe(subscription);
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _context4,
            _this3 = this;

        _forEachInstanceProperty(_context4 = _Object$keys(prevProps)).call(_context4, function (prop) {
          if (!prevProps[prop] && _this3.props[prop]) {
            _this3.subscribeToProp(prop);
          } else if (prevProps[prop] !== _this3.props[prop]) {
            _this3.unsubscribe(prop);

            _this3.subscribeToProp(prop);
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _context5,
            _this4 = this;

        var props = _reduceInstanceProperty(_context5 = _Object$keys(this.props)).call(_context5, function (accum, curr) {
          if (!isObservable(_this4.props[curr])) {
            accum[curr] = _this4.props[curr];
            return accum;
          }

          return accum;
        }, {});

        return React.createElement(WrappedComponent, _objectSpread({}, props, {}, this.state.observedValues));
      }
    }]);

    return _temp;
  }(Component), _temp;
}
//# sourceMappingURL=index.js.map