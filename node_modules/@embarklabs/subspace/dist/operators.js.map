{"version":3,"sources":["../src/operators.js"],"names":["$takeProps","args","arguments","v","r","a","$average","cb","accum","curr","currentValue","String","sum","count","o","$max","acc","$min","$latest","num","push","length","shift"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEO,SAASA,UAAT,GAAsB;AAC3B,QAAMC,IAAI,GAAG,qBAAcC,SAAd,CAAb;AACA,SAAO,gBACL,sCAAIC,CAAC,IAAI;AACP,UAAMC,CAAC,GAAG,EAAV;AACA,0BAAAH,IAAI,MAAJ,CAAAA,IAAI,EAASI,CAAC,IAAI;AAChBD,MAAAA,CAAC,CAACC,CAAD,CAAD,GAAOF,CAAC,CAACE,CAAD,CAAR;AACD,KAFG,CAAJ;AAGA,WAAOD,CAAP;AACD,GAND,CADK,CAAP;AASD;AAED;;;;;;;;AAOO,SAASE,QAAT,CAAkBC,EAAlB,EAAsB;AACzB,SAAO,gBACL,qBAAK,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpB,QAAIC,YAAJ;;AACA,QAAI,OAAOH,EAAP,KAAc,QAAd,IAA0BA,EAAE,YAAYI,MAA5C,EAAmD;AACjDD,MAAAA,YAAY,GAAGD,IAAI,CAACF,EAAD,CAAnB;AACD,KAFD,MAEO,IAAG,OAAOA,EAAP,KAAc,UAAjB,EAA6B;AAClCG,MAAAA,YAAY,GAAGH,EAAE,CAACE,IAAD,CAAjB;AACD,KAFM,MAEA;AACLC,MAAAA,YAAY,GAAGD,IAAf;AACD;;AAED,WAAO;AACLG,MAAAA,GAAG,EAAEJ,KAAK,CAACI,GAAN,GAAYF,YADZ;AAELG,MAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,GAAc;AAFhB,KAAP;AAID,GAdD,EAcG;AAAED,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,KAAK,EAAE;AAAjB,GAdH,CADK,EAgBL,sCAAIC,CAAC,IAAIA,CAAC,CAACF,GAAF,GAAQE,CAAC,CAACD,KAAnB,CAhBK,CAAP;AAkBD;;AAEI,SAASE,IAAT,CAAcR,EAAd,EAAkB;AACvB,SAAO,gBACL,qBAAK,CAACS,GAAD,EAAMP,IAAN,KAAe;AAClB,QAAIC,YAAJ;;AACA,QAAI,OAAOH,EAAP,KAAc,QAAd,IAA0BA,EAAE,YAAYI,MAA5C,EAAmD;AACjDD,MAAAA,YAAY,GAAGD,IAAI,CAACF,EAAD,CAAnB;AACD,KAFD,MAEO,IAAG,OAAOA,EAAP,KAAc,UAAjB,EAA6B;AAClCG,MAAAA,YAAY,GAAGH,EAAE,CAACE,IAAD,CAAjB;AACD,KAFM,MAEA;AACLC,MAAAA,YAAY,GAAGD,IAAf;AACD;;AAED,QAAIC,YAAY,GAAGM,GAAnB,EAAwB,OAAON,YAAP;AACxB,WAAOM,GAAP;AACD,GAZD,CADK,CAAP;AAeD;;AAEM,SAASC,IAAT,CAAcV,EAAd,EAAkB;AACvB,SAAO,gBACL,qBAAK,CAACS,GAAD,EAAMP,IAAN,KAAe;AAClB,QAAIC,YAAJ;;AACA,QAAI,OAAOH,EAAP,KAAc,QAAd,IAA0BA,EAAE,YAAYI,MAA5C,EAAmD;AACjDD,MAAAA,YAAY,GAAGD,IAAI,CAACF,EAAD,CAAnB;AACD,KAFD,MAEO,IAAG,OAAOA,EAAP,KAAc,UAAjB,EAA6B;AAClCG,MAAAA,YAAY,GAAGH,EAAE,CAACE,IAAD,CAAjB;AACD,KAFM,MAEA;AACLC,MAAAA,YAAY,GAAGD,IAAf;AACD;;AAED,QAAIC,YAAY,GAAGM,GAAnB,EAAwB,OAAON,YAAP;AACxB,WAAOM,GAAP;AACD,GAZD,CADK,CAAP;AAeD;;AAEM,SAASE,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,SAAO,gBACL,qBAAK,CAACH,GAAD,EAAMP,IAAN,KAAe;AAClB,QAAIC,YAAY,GAAGD,IAAnB;AAEAO,IAAAA,GAAG,CAACI,IAAJ,CAASV,YAAT;;AACA,QAAIM,GAAG,CAACK,MAAJ,GAAaF,GAAjB,EAAsB;AACpBH,MAAAA,GAAG,CAACM,KAAJ;AACD;;AAED,WAAON,GAAP;AACD,GATD,EASG,EATH,CADK,CAAP;AAYD;AAED","sourcesContent":["import { of, pipe }  from 'rxjs';\nimport { map, pluck, scan } from 'rxjs/operators';\n\nexport function $takeProps() {\n  const args = Object.values(arguments);\n  return pipe(\n    map(v => {\n      const r = {};\n      args.forEach(a => {\n        r[a] = v[a];\n      });\n      return r;\n    }),\n  );\n}\n\n/*\n// ex 1\nof({a: 1, b:2, e: 1}, {a: 0, c: 1, b:3}, {a: 0, d: 1, b:1})\n  .pipe($takeProps(\"a\", \"b\", \"e\"))\n  .subscribe((v) => console.log(v));\n*/\n\nexport function $average(cb) {\n    return pipe(\n      scan((accum, curr) => {\n        let currentValue;\n        if (typeof cb === 'string' || cb instanceof String){\n          currentValue = curr[cb];\n        } else if(typeof cb === \"function\") {\n          currentValue = cb(curr);\n        } else {\n          currentValue = curr;\n        }\n  \n        return {\n          sum: accum.sum + currentValue,\n          count: accum.count + 1\n        }\n      }, { sum: 0, count: 0 }),\n      map(o => o.sum / o.count)\n    );\n  }\n\nexport function $max(cb) {\n  return pipe(\n    scan((acc, curr) => {\n      let currentValue;\n      if (typeof cb === 'string' || cb instanceof String){\n        currentValue = curr[cb];\n      } else if(typeof cb === \"function\") {\n        currentValue = cb(curr);\n      } else {\n        currentValue = curr;\n      }\n\n      if (currentValue > acc) return currentValue;\n      return acc;\n    })\n  );\n}\n\nexport function $min(cb) {\n  return pipe(\n    scan((acc, curr) => {\n      let currentValue;\n      if (typeof cb === 'string' || cb instanceof String){\n        currentValue = curr[cb];\n      } else if(typeof cb === \"function\") {\n        currentValue = cb(curr);\n      } else {\n        currentValue = curr;\n      }\n\n      if (currentValue < acc) return currentValue;\n      return acc;\n    })\n  );\n}\n\nexport function $latest(num) {\n  return pipe(\n    scan((acc, curr) => {\n      let currentValue = curr;\n\n      acc.push(currentValue)\n      if (acc.length > num) {\n        acc.shift()\n      }\n\n      return acc;\n    }, [])\n  );\n}\n\n/*\nof(10, 3, 4)\n  .pipe($average())\n  .subscribe((v) => console.log(v));\n*/\n"],"file":"operators.js"}