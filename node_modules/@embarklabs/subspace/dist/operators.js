"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _mapInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/map");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.$takeProps = $takeProps;
exports.$average = $average;
exports.$max = $max;
exports.$min = $min;
exports.$latest = $latest;

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _values = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/values"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function $takeProps() {
  const args = (0, _values.default)(arguments);
  return (0, _rxjs.pipe)((0, _mapInstanceProperty(_operators))(v => {
    const r = {};
    (0, _forEach.default)(args).call(args, a => {
      r[a] = v[a];
    });
    return r;
  }));
}
/*
// ex 1
of({a: 1, b:2, e: 1}, {a: 0, c: 1, b:3}, {a: 0, d: 1, b:1})
  .pipe($takeProps("a", "b", "e"))
  .subscribe((v) => console.log(v));
*/


function $average(cb) {
  return (0, _rxjs.pipe)((0, _operators.scan)((accum, curr) => {
    let currentValue;

    if (typeof cb === 'string' || cb instanceof String) {
      currentValue = curr[cb];
    } else if (typeof cb === "function") {
      currentValue = cb(curr);
    } else {
      currentValue = curr;
    }

    return {
      sum: accum.sum + currentValue,
      count: accum.count + 1
    };
  }, {
    sum: 0,
    count: 0
  }), (0, _mapInstanceProperty(_operators))(o => o.sum / o.count));
}

function $max(cb) {
  return (0, _rxjs.pipe)((0, _operators.scan)((acc, curr) => {
    let currentValue;

    if (typeof cb === 'string' || cb instanceof String) {
      currentValue = curr[cb];
    } else if (typeof cb === "function") {
      currentValue = cb(curr);
    } else {
      currentValue = curr;
    }

    if (currentValue > acc) return currentValue;
    return acc;
  }));
}

function $min(cb) {
  return (0, _rxjs.pipe)((0, _operators.scan)((acc, curr) => {
    let currentValue;

    if (typeof cb === 'string' || cb instanceof String) {
      currentValue = curr[cb];
    } else if (typeof cb === "function") {
      currentValue = cb(curr);
    } else {
      currentValue = curr;
    }

    if (currentValue < acc) return currentValue;
    return acc;
  }));
}

function $latest(num) {
  return (0, _rxjs.pipe)((0, _operators.scan)((acc, curr) => {
    let currentValue = curr;
    acc.push(currentValue);

    if (acc.length > num) {
      acc.shift();
    }

    return acc;
  }, []));
}
/*
of(10, 3, 4)
  .pipe($average())
  .subscribe((v) => console.log(v));
*/
//# sourceMappingURL=operators.js.map