{"version":3,"sources":["../src/eventSyncer.js"],"names":["EventSyncer","constructor","web3","events","db","isWebsocketProvider","eventKey","contractInstance","eventName","filters","fromBlock","toBlock","hardLimit","getPastEvents","cb","callbackFactory","ev","emit","storedEvents","getEventsFor","x","blockNumber","subscriptions","s","push","filterConditions","err","console","error","propsToFilter","prop","returnValues","eventScanner","WsEventScanner","HttpEventScanner","track","gteBlockNum","networkId","address","options","deleteNewestBlocks","lastKnownBlock","getLastKnownEvent","firstKnownBlock","getFirstKnownEvent","sub","ReplaySubject","contractObserver","subscribe","e","complete","id","transactionIndex","logIndex","eventData","removed","next","deleteEvent","eventExists","recordEvent","fnDBEvents","serveDBEvents","fnPastEvents","fnSubscribe","subscribeToEvent","eth_subscribe","scan","og_subscribe","apply","add","then","susc","unsubscribe","close"],"mappings":"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","sourcesContent":["import { fromEvent, ReplaySubject } from 'rxjs';\nimport hash from 'object-hash';\nimport HttpEventScanner from './httpEventScanner';\nimport WsEventScanner from './wsEventScanner';\n\nclass EventSyncer {\n\n  constructor(web3, events, db, isWebsocketProvider) {\n    this.events = events;\n    this.web3 = web3;\n    this.db = db;\n    this.isWebsocketProvider = isWebsocketProvider;\n    this.eventScanner = isWebsocketProvider ? new WsEventScanner(web3) : new HttpEventScanner(web3);\n  }\n\n  track(contractInstance, eventName, filters, gteBlockNum, networkId) {\n    const eventKey =  hash(Object.assign({address: contractInstance.options.address, networkId}, (filters || {})));\n\n    this.db.deleteNewestBlocks(eventKey, gteBlockNum);\n\n    let filterConditions = Object.assign({fromBlock: 0, toBlock: \"latest\"}, filters || {});\n    let lastKnownBlock = this.db.getLastKnownEvent(eventKey);\n    let firstKnownBlock = this.db.getFirstKnownEvent(eventKey);\n\n\n    let sub = new ReplaySubject();\n    let contractObserver = fromEvent(this.events, eventKey)\n\n    contractObserver.subscribe((e) => {\n      if (!e) {\n        sub.complete();\n        return;\n      }\n\n      const id = hash({eventName, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex});\n\n      // TODO: would be nice if this was smart enough to understand the type of returnValues and do the needed conversions\n      const eventData = {\n        id,\n        returnValues: {...e.returnValues},\n        blockNumber: e.blockNumber, \n        transactionIndex: e.transactionIndex, \n        logIndex: e.logIndex,\n        removed: e.removed\n      }\n\n      // TODO: test reorgs\n      sub.next({blockNumber: e.blockNumber, ...e.returnValues});\t\n\n      if (e.removed){\n        this.db.deleteEvent(eventKey, id);\n        return;\n      }\n\n      if (this.db.eventExists(eventKey, eventData.id)) return;\n\n      this.db.recordEvent(eventKey, eventData);\n\n      this.events.emit(\"updateDB\");\n    });\n\n\n    const fnDBEvents = this.serveDBEvents(eventKey);\n    const fnPastEvents = this.getPastEvents(eventKey, contractInstance, eventName, filters);\n\n    if(this.isWebsocketProvider){\n      const fnSubscribe = this.subscribeToEvent(eventKey, contractInstance, eventName);\n      const eth_subscribe = this.eventScanner.scan(fnDBEvents, fnPastEvents, fnSubscribe, firstKnownBlock, lastKnownBlock, filterConditions);\n\n      const og_subscribe = sub.subscribe;\n      sub.subscribe = async (next, error, complete) => {\n        const s = og_subscribe.apply(sub, [next, error, complete]);\n        s.add(() => { // Removing web3js subscription when rxJS unsubscribe is executed\n          eth_subscribe.then(susc => {\n            if(susc) {\n              susc.unsubscribe();\n            }\n          });\n        });\n        return s;\n      }\n    } else {\n      this.eventScanner.scan(fnDBEvents, fnPastEvents, lastKnownBlock, filterConditions);\n    }\n\n    return sub;\n  }\n\n  getPastEvents = (eventKey, contractInstance, eventName, filters) => async (fromBlock, toBlock, hardLimit) => { \n    let events = await contractInstance.getPastEvents(eventName, { ...filters, fromBlock, toBlock });  \n    const cb = this.callbackFactory(filters, eventKey);\n    \n    events.forEach(ev => cb(null, ev));\n\n    if(hardLimit && toBlock === hardLimit){ // Complete the observable\n      this.events.emit(eventKey);\n    }\n  }\n\n  serveDBEvents = eventKey => (filters, toBlock, fromBlock = null) => {\n    const cb = this.callbackFactory(filters, eventKey);\n    const storedEvents = this.db.getEventsFor(eventKey).filter(x => x.blockNumber >= (fromBlock || filters.fromBlock) && x.blockNumber <= toBlock);\n    storedEvents.forEach(ev => {\n      cb(null, ev);\n    });\n  }\n\n  subscribeToEvent = (eventKey, contractInstance, eventName) => (subscriptions, filters) => {\n    const cb = this.callbackFactory(filters, eventKey);\n    const s = contractInstance.events[eventName](filters, cb);\n    subscriptions.push(s);\n    return s;\n  }\n\n  callbackFactory = (filterConditions, eventKey) => (err, ev) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    if (filterConditions) {\n      let propsToFilter = [];\n      for (let prop in filterConditions.filter) {\n        if (Object.keys(ev.returnValues).indexOf(prop) >= 0) {\n          propsToFilter.push(prop);\n        }\n      }\n      for (let prop of propsToFilter) {\n        if (filterConditions.filter[prop] !== ev.returnValues[prop]) return;\n      }\n    }\n\n    this.events.emit(eventKey, ev);\n  }\n\n  close(){\n    this.eventScanner.close();\n  }\n}\n\nexport default EventSyncer;\n"],"file":"eventSyncer.js"}