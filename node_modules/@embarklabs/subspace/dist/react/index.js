"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.observe = observe;

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _rxjs = require("rxjs");

function observe(WrappedComponent) {
  var _temp;

  return _temp = class extends _react.Component {
    constructor(...args) {
      super(...args);
      (0, _defineProperty2.default)(this, "state", {
        observedValues: {},
        subscriptions: {}
      });
      (0, _defineProperty2.default)(this, "unsubscribe", prop => {
        const subscriptions = { ...this.state.subscriptions
        };
        if (subscriptions[prop]) subscriptions[prop].unsubscribe();
        delete subscriptions[prop];
        this.setState({
          subscriptions
        });
      });
      (0, _defineProperty2.default)(this, "subscribeToProp", prop => {
        if (!(0, _rxjs.isObservable)(this.props[prop])) return;
        const subscription = this.props[prop].subscribe(value => {
          this.setState(state => ({
            observedValues: { ...state.observedValues,
              [prop]: value
            }
          }));
        }, err => {
          // TODO: pass the error to the wrapped component
          console.error(err);
        });
        this.setState({
          subscriptions: { ...this.state.subscriptions,
            [prop]: subscription
          }
        });
      });
    }

    componentDidMount() {
      var _context;

      (0, _forEach.default)(_context = (0, _keys.default)(this.props)).call(_context, this.subscribeToProp);
    }

    componentWillUnmount() {
      var _context2;

      (0, _forEach.default)(_context2 = (0, _keys.default)(this.state.subscriptions)).call(_context2, subscription => {
        this.unsubscribe(subscription);
      });
    }

    componentDidUpdate(prevProps) {
      var _context3;

      (0, _forEach.default)(_context3 = (0, _keys.default)(prevProps)).call(_context3, prop => {
        if (!prevProps[prop] && this.props[prop]) {
          this.subscribeToProp(prop);
        } else if (prevProps[prop] !== this.props[prop]) {
          this.unsubscribe(prop);
          this.subscribeToProp(prop);
        }
      });
    }

    render() {
      var _context4;

      const props = (0, _reduce.default)(_context4 = (0, _keys.default)(this.props)).call(_context4, (accum, curr) => {
        if (!(0, _rxjs.isObservable)(this.props[curr])) {
          accum[curr] = this.props[curr];
          return accum;
        }

        return accum;
      }, {});
      return _react.default.createElement(WrappedComponent, { ...props,
        ...this.state.observedValues
      });
    }

  }, _temp;
}
//# sourceMappingURL=index.js.map