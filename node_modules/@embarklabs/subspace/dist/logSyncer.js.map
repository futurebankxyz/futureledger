{"version":3,"sources":["../src/logSyncer.js"],"names":["LogSyncer","constructor","web3","events","db","filterConditions","eventKey","err","ev","Error","address","toLowerCase","topics","shouldSkip","topic","i","emit","subscriptions","track","options","inputsABI","gteBlockNum","networkId","fromBlock","toBlock","deleteNewestBlocks","eventSummary","getLastKnownEvent","sub","ReplaySubject","logObserver","subscribe","e","id","eventName","blockNumber","transactionIndex","logIndex","eventData","data","removed","obsData","returnValues","eth","abi","decodeLog","next","deleteEvent","eventExists","recordEvent","eth_subscribe","_retrieveEvents","firstKnownBlock","lastKnownBlock","og_subscribe","error","complete","s","apply","add","unsubscribe","_serveDBEvents","filters","_subscribeToEvent","_getPastEvents","cb","_parseEventCBFactory","storedEvents","getEventsFor","x","getPastLogs","logs","l","push","close"],"mappings":"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","sourcesContent":["import { fromEvent, ReplaySubject } from 'rxjs';\nimport hash from 'object-hash';\n\nclass LogSyncer {\n  constructor(web3, events, db) {\n    this.events = events;\n    this.web3 = web3;\n    this.db = db;\n\n    this.subscriptions = [];\n  }\n\n  track(options, inputsABI, gteBlockNum, networkId){\n    const eventKey = 'logs-' + hash(Object.assign({networkId}, options || {}));\n    const filterConditions = Object.assign({fromBlock: 0, toBlock: \"latest\"}, options || {});\n\n    this.db.deleteNewestBlocks(eventKey, gteBlockNum);\n\n    const eventSummary = this.db.getLastKnownEvent(eventKey);\n    const sub = new ReplaySubject();\n    const logObserver = fromEvent(this.events, eventKey)\n\n    logObserver.subscribe((e) => {\n      if (!e) return;\n\n      const id = hash({eventName: eventKey, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex});\n\n      // TODO: would be nice if this was smart enough to understand the type of returnValues and do the needed conversions\n      const eventData = {\n        id: hash({eventName: eventKey, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex}),\n        data: e.data,\n        address: e.address,\n        topics: e.topics,\n        removed: e.removed\n      }\n\n      const obsData = {blockNumber: e.blockNumber, data: e.data, address: e.address, topics: e.topics};\n\n      if(inputsABI){\n        eventData.returnValues = web3.eth.abi.decodeLog(inputsABI, e.data, e.topics.slice(1));\n        obsData.returnValues = eventData.returnValues;\n      }\n\n      // TODO: test reorgs\n\n      sub.next(obsData);\n\n      if(e.removed){\n        this.db.deleteEvent(eventKey, id);\n        return;\n      }\n\n      if (this.db.eventExists(eventKey, eventData.id)) return;\n\n      this.db.recordEvent(eventKey, eventData);\n\n      this.events.emit(\"updateDB\");\n    });\n\n    const eth_subscribe = this._retrieveEvents(eventKey,\n                                           eventSummary.firstKnownBlock,\n                                           eventSummary.lastKnownBlock,\n                                           filterConditions\n                                          );\n\n    const og_subscribe = sub.subscribe;\n    sub.subscribe = (next, error, complete) => {\n      const s = og_subscribe.apply(sub, [next, error, complete]);\n      s.add(() => { // Removing web3js subscription when rxJS unsubscribe is executed\n        if (eth_subscribe) eth_subscribe.unsubscribe();\n      });\n      return s;\n    }\n\n    return sub;\n  }\n\n  _retrieveEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions) {\n    // TODO: this should be moved to a 'smart' module\n    // it should be able to do events X at the time to avoid slow downs as well as the 10k limit\n    if (firstKnownBlock == 0 || (firstKnownBlock > 0 && firstKnownBlock <= filterConditions.fromBlock)) {\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a event subscription [lastKnownBlock + 1, ...]\n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        return this._subscribeToEvent(filters, eventKey);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, filterConditions.toBlock, filterConditions);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a past event subscription [lastKnownBlock + 1, toBlock]\n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        this._getPastEvents(filters, eventKey);\n      }\n    }\n    else if (firstKnownBlock > 0) {\n      // create a past event subscription [ firstKnownBlock > fromBlock ? fromBlock : 0, firstKnownBlock - 1]\n      let fromBlock = firstKnownBlock > filterConditions.fromBlock ? filterConditions.fromBlock : 0;\n      let filters = Object.assign({}, filterConditions, { fromBlock, toBlock: firstKnownBlock - 1 });\n      this._getPastEvents(filters, eventKey);\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [firstKnownBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions);\n        // create a subscription [lastKnownBlock + 1, ...]\n        const filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1 });\n        return this._subscribeToEvent(filters, eventKey);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, filterConditions.toBlock, filterConditions);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a past event subscription [lastKnownBlock + 1, toBlock]\n        let filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1, toBlock: filterConditions.toBlock });\n        this._getPastEvents(filters, eventKey);\n      }\n    }\n  }\n\n  _serveDBEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions) {\n    const cb = this._parseEventCBFactory(filterConditions, eventKey);\n    const storedEvents = this.db.getEventsFor(eventKey).filter(x => x.blockNumber >= firstKnownBlock && x.blockNumber <= lastKnownBlock);\n    storedEvents.forEach(ev => {\n      cb(null, ev);\n    });\n  }\n\n  _getPastEvents(filterConditions, eventKey) {\n    const cb = this._parseEventCBFactory(filterConditions, eventKey);\n    this.web3.getPastLogs(options, (err, logs) => {\n      if(err) {\n        throw new Error(err);\n      }\n\n      logs.forEach(l => {\n        cb(null, l);\n      })\n    });\n  }\n\n  _subscribeToEvent(filterConditions, eventKey) {\n    const s = this.web3.subscribe('logs', filterConditions, this._parseEventCBFactory(filterConditions, eventKey));\n    this.subscriptions.push(s);\n    return s;\n  }\n\n  _parseEventCBFactory = (filterConditions, eventKey) => (err, ev) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (filterConditions) {\n      if (filterConditions.address && ev.address.toLowerCase() !== filterConditions.address.toLowerCase()) return;\n      if (filterConditions.topics){\n        let shouldSkip = false;\n        filterConditions.topics.forEach((topic, i) => {\n          if (topic != null && (!ev.topics[i] || ev.topics[i].toLowerCase() !== topic.toLowerCase())){\n            shouldSkip = true;\n          }\n        });\n        if(shouldSkip) return;\n      }\n    }\n\n    this.events.emit(eventKey, ev);\n  }\n\n  close(){\n    this.subscriptions.forEach(x => {\n      x.unsubscribe();\n    })\n  }\n}\n\nexport default LogSyncer;\n"],"file":"logSyncer.js"}