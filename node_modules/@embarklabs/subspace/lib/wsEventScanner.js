import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";

var WsEventScanner =
/*#__PURE__*/
function () {
  function WsEventScanner(web3) {
    _classCallCheck(this, WsEventScanner);

    this.web3 = web3;
    this.subscriptions = [];
  }

  _createClass(WsEventScanner, [{
    key: "scan",
    value: function () {
      var _scan = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee(serveDBEvents, getPastEvents, subscribe, firstKnownBlock, lastKnownBlock, filterConditions) {
        var lastBlockNumberAtLoad, toBlockFilter, toBlockInPast, hardLimit, filters, fromBlock, _fromBlock, _filters;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.web3.getBlockNumber();

              case 2:
                lastBlockNumberAtLoad = _context.sent;
                // If there's a toBlock with a number
                toBlockFilter = 0;

                if (filterConditions.toBlock && filterConditions.toBlock !== 'latest') {
                  toBlockFilter = filterConditions.toBlock;
                }

                toBlockInPast = toBlockFilter && toBlockFilter < lastBlockNumberAtLoad;
                hardLimit = toBlockInPast ? toBlockFilter : null;

                if (!(firstKnownBlock == 0 || firstKnownBlock > 0 && firstKnownBlock <= filterConditions.fromBlock)) {
                  _context.next = 24;
                  break;
                }

                if (!(filterConditions.toBlock === 'latest')) {
                  _context.next = 14;
                  break;
                }

                // emit DB Events [fromBlock, lastKnownBlock]
                serveDBEvents(filterConditions, lastKnownBlock); // create a event subscription [lastKnownBlock + 1, ...] 

                filters = _Object$assign({}, filterConditions, {
                  fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1
                });
                return _context.abrupt("return", subscribe(this.subscriptions, filters));

              case 14:
                if (!(filterConditions.toBlock <= lastKnownBlock)) {
                  _context.next = 18;
                  break;
                }

                // emit DB Events [fromBlock, toBlock]
                serveDBEvents(filterConditions, filterConditions.toBlock);
                _context.next = 22;
                break;

              case 18:
                // emit DB Events [fromBlock, lastKnownBlock]
                serveDBEvents(filterConditions, lastKnownBlock); // get past events [lastKnownBlock + 1, toBlock]

                fromBlock = filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1;
                _context.next = 22;
                return getPastEvents(fromBlock, filterConditions.toBlock, hardLimit);

              case 22:
                _context.next = 41;
                break;

              case 24:
                if (!(firstKnownBlock > 0)) {
                  _context.next = 41;
                  break;
                }

                // get past events [ firstKnownBlock > fromBlock ? fromBlock : 0, firstKnownBlock - 1]
                _fromBlock = firstKnownBlock > filterConditions.fromBlock ? filterConditions.fromBlock : 0;
                _context.next = 28;
                return getPastEvents(_fromBlock, firstKnownBlock - 1, hardLimit);

              case 28:
                if (!(filterConditions.toBlock === 'latest')) {
                  _context.next = 34;
                  break;
                }

                // emit DB Events [firstKnownBlock, lastKnownBlock]
                serveDBEvents(filterConditions, lastKnownBlock, firstKnownBlock); // create a subscription [lastKnownBlock + 1, ...]

                _filters = _Object$assign({}, filterConditions, {
                  fromBlock: lastKnownBlock + 1
                });
                return _context.abrupt("return", subscribe(this.subscriptions, _filters));

              case 34:
                if (!(filterConditions.toBlock <= lastKnownBlock)) {
                  _context.next = 38;
                  break;
                }

                // emit DB Events [fromBlock, toBlock]
                serveDBEvents(filterConditions, filterConditions.toBlock);
                _context.next = 41;
                break;

              case 38:
                // emit DB Events [fromBlock, lastKnownBlock]
                serveDBEvents(filterConditions, lastKnownBlock); // get past events [lastKnownBlock + 1, toBlock]

                _context.next = 41;
                return getPastEvents(lastKnownBlock + 1, filterConditions.toBlock, hardLimit);

              case 41:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function scan(_x, _x2, _x3, _x4, _x5, _x6) {
        return _scan.apply(this, arguments);
      }

      return scan;
    }()
  }, {
    key: "close",
    value: function close() {
      var _context2;

      _forEachInstanceProperty(_context2 = this.subscriptions).call(_context2, function (x) {
        return x.unsubscribe();
      });
    }
  }]);

  return WsEventScanner;
}();

export default WsEventScanner;
//# sourceMappingURL=wsEventScanner.js.map