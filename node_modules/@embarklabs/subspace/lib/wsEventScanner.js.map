{"version":3,"sources":["../src/wsEventScanner.js"],"names":["WsEventScanner","web3","subscriptions","serveDBEvents","getPastEvents","subscribe","firstKnownBlock","lastKnownBlock","filterConditions","getBlockNumber","lastBlockNumberAtLoad","toBlockFilter","toBlock","toBlockInPast","hardLimit","fromBlock","filters","x","unsubscribe"],"mappings":"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","sourcesContent":["class WsEventScanner {\n  constructor(web3) {\n    this.web3 = web3;\n    this.subscriptions = [];\n  }\n\n  async scan(serveDBEvents, getPastEvents, subscribe, firstKnownBlock, lastKnownBlock, filterConditions) {\n    const lastBlockNumberAtLoad = await this.web3.getBlockNumber();\n\n    // If there's a toBlock with a number\n    let toBlockFilter = 0;\n    if(filterConditions.toBlock && filterConditions.toBlock !== 'latest' ){\n      toBlockFilter = filterConditions.toBlock;\n    }\n    const toBlockInPast =  toBlockFilter && toBlockFilter < lastBlockNumberAtLoad;\n    const hardLimit = toBlockInPast ? toBlockFilter : null;\n    \n    if (firstKnownBlock == 0 || (firstKnownBlock > 0 && firstKnownBlock <= filterConditions.fromBlock)) {\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock);\n        // create a event subscription [lastKnownBlock + 1, ...] \n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        return subscribe(this.subscriptions, filters);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        serveDBEvents(filterConditions, filterConditions.toBlock);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock);\n        // get past events [lastKnownBlock + 1, toBlock]\n        const fromBlock = filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1;\n        await getPastEvents(fromBlock, filterConditions.toBlock, hardLimit);  \n      }\n    }\n    else if (firstKnownBlock > 0) {\n      // get past events [ firstKnownBlock > fromBlock ? fromBlock : 0, firstKnownBlock - 1]\n      const fromBlock = firstKnownBlock > filterConditions.fromBlock ? filterConditions.fromBlock : 0;\n      await getPastEvents(fromBlock, firstKnownBlock - 1, hardLimit);  \n\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [firstKnownBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock, firstKnownBlock);\n        // create a subscription [lastKnownBlock + 1, ...]\n        const filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1 });\n        return subscribe(this.subscriptions, filters);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        serveDBEvents(filterConditions, filterConditions.toBlock);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock);\n        // get past events [lastKnownBlock + 1, toBlock]\n        await getPastEvents(lastKnownBlock + 1, filterConditions.toBlock, hardLimit);  \n      }\n    }\n  }\n\n  close(){\n    this.subscriptions.forEach(x => x.unsubscribe());\n  }\n}\n\nexport default WsEventScanner;\n"],"file":"wsEventScanner.js"}