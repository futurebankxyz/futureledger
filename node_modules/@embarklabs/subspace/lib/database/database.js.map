{"version":3,"sources":["../../src/database/database.js"],"names":["fromEvent","loki","getENV","global","android","NSObject","window","document","URL","Database","dbFilename","events","cb","db","autoload","autoloadCallback","databaseInitialize","autosave","env","autosaveInterval","dbChanges","subscribe","saveDatabase","eventKey","collection","getCollection","count","max","addCollection","min","children","eventId","length","values","insert","chain","remove","gteBlockNum"],"mappings":"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","sourcesContent":["import { fromEvent } from 'rxjs';\nimport loki from 'lokijs';\n\nconst getENV = function () {\n  if (typeof global !== 'undefined' && (global.android || global.NSObject)) {\n     // If no adapter assume nativescript which needs adapter to be passed manually\n     return 'NATIVESCRIPT'; //nativescript\n  }\n\n  if (typeof window === 'undefined') {\n    return 'NODEJS';\n  } \n\n  // TODO: LokiJS determines it's running in a browser if process is undefined, \n  // yet we need webpack shim for process in a different package.\n  // this code ignores is the same getENV from loki except for the check for node webkit\n\n  if (typeof document !== 'undefined') {\n    if (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1) {\n      return 'CORDOVA';\n    }\n    return 'BROWSER';\n  }\n\n  return 'CORDOVA';\n};\n\nclass Database {\n\n  constructor(dbFilename, events, cb) {\n    this.db = new loki(dbFilename, {\n      autoload: true,\n      autoloadCallback: () => {\n        this.databaseInitialize()\n      },\n      autosave: true,\n      env: getENV(),\n      autosaveInterval: 2000\n    });\n\n    this.events = events;\n  }\n\n  databaseInitialize(cb) {\n    let dbChanges = fromEvent(this.events, \"updateDB\")\n    dbChanges.subscribe(() => {\n      this.db.saveDatabase()\n    })\n  }\n\n  getLastKnownEvent(eventKey) {\n    const collection = this.db.getCollection(eventKey);\n    if (collection && collection.count()){\n      return collection.max('blockNumber');\n    } else {\n      this.db.addCollection(eventKey);\n    }\n    return 0;\n  }\n\n  getFirstKnownEvent(eventKey) {\n    const collection = this.db.getCollection(eventKey);\n    if (collection && collection.count()){\n      return collection.min('blockNumber');\n    } else {\n      this.db.addCollection(eventKey);\n    }\n    return 0;\n  }\n\n  getEventsFor(eventKey) {\n    let children = this.db.getCollection(eventKey);\n    return children.find();\n  }\n\n  eventExists(eventKey, eventId) {\n    let collection = this.db.getCollection(eventKey);\n    if(!collection){\n      this.db.addCollection(eventKey);\n      return false;\n    }\n\n    return (collection.find({ 'id': eventId }).length > 0);\n  }\n\n  recordEvent(eventKey, values) {\n    let children = this.db.getCollection(eventKey);\n    children.insert(values);\n  }\n\n  deleteEvent(eventKey, eventId) {\n    const collection = this.db.getCollection(eventKey);\n    if(collection)\n    collection.chain().find({ 'id': eventId }).remove();\n  }\n\n  deleteNewestBlocks(eventKey, gteBlockNum) {\n    if(gteBlockNum <= 0) return;\n    \n    const collection = this.db.getCollection(eventKey);\n    if(collection)\n    collection.chain().find({ 'blockNumber': {'$gte': gteBlockNum}}).remove();\n  }\n\n}\n\nexport default Database;\n"],"file":"database.js"}