import _findInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import { fromEvent } from 'rxjs';
import loki from 'lokijs';

var getENV = function getENV() {
  if (typeof global !== 'undefined' && (global.android || global.NSObject)) {
    // If no adapter assume nativescript which needs adapter to be passed manually
    return 'NATIVESCRIPT'; //nativescript
  }

  if (typeof window === 'undefined') {
    return 'NODEJS';
  } // TODO: LokiJS determines it's running in a browser if process is undefined, 
  // yet we need webpack shim for process in a different package.
  // this code ignores is the same getENV from loki except for the check for node webkit


  if (typeof document !== 'undefined') {
    var _context, _context2;

    if (_indexOfInstanceProperty(_context = document.URL).call(_context, 'http://') === -1 && _indexOfInstanceProperty(_context2 = document.URL).call(_context2, 'https://') === -1) {
      return 'CORDOVA';
    }

    return 'BROWSER';
  }

  return 'CORDOVA';
};

var Database =
/*#__PURE__*/
function () {
  function Database(dbFilename, events, cb) {
    var _this = this;

    _classCallCheck(this, Database);

    this.db = new loki(dbFilename, {
      autoload: true,
      autoloadCallback: function autoloadCallback() {
        _this.databaseInitialize();
      },
      autosave: true,
      env: getENV(),
      autosaveInterval: 2000
    });
    this.events = events;
  }

  _createClass(Database, [{
    key: "databaseInitialize",
    value: function databaseInitialize(cb) {
      var _this2 = this;

      var dbChanges = fromEvent(this.events, "updateDB");
      dbChanges.subscribe(function () {
        _this2.db.saveDatabase();
      });
    }
  }, {
    key: "getLastKnownEvent",
    value: function getLastKnownEvent(eventKey) {
      var collection = this.db.getCollection(eventKey);

      if (collection && collection.count()) {
        return collection.max('blockNumber');
      } else {
        this.db.addCollection(eventKey);
      }

      return 0;
    }
  }, {
    key: "getFirstKnownEvent",
    value: function getFirstKnownEvent(eventKey) {
      var collection = this.db.getCollection(eventKey);

      if (collection && collection.count()) {
        return collection.min('blockNumber');
      } else {
        this.db.addCollection(eventKey);
      }

      return 0;
    }
  }, {
    key: "getEventsFor",
    value: function getEventsFor(eventKey) {
      var children = this.db.getCollection(eventKey);
      return _findInstanceProperty(children).call(children);
    }
  }, {
    key: "eventExists",
    value: function eventExists(eventKey, eventId) {
      var collection = this.db.getCollection(eventKey);

      if (!collection) {
        this.db.addCollection(eventKey);
        return false;
      }

      return _findInstanceProperty(collection).call(collection, {
        'id': eventId
      }).length > 0;
    }
  }, {
    key: "recordEvent",
    value: function recordEvent(eventKey, values) {
      var children = this.db.getCollection(eventKey);
      children.insert(values);
    }
  }, {
    key: "deleteEvent",
    value: function deleteEvent(eventKey, eventId) {
      var _context3;

      var collection = this.db.getCollection(eventKey);
      if (collection) _findInstanceProperty(_context3 = collection.chain()).call(_context3, {
        'id': eventId
      }).remove();
    }
  }, {
    key: "deleteNewestBlocks",
    value: function deleteNewestBlocks(eventKey, gteBlockNum) {
      var _context4;

      if (gteBlockNum <= 0) return;
      var collection = this.db.getCollection(eventKey);
      if (collection) _findInstanceProperty(_context4 = collection.chain()).call(_context4, {
        'blockNumber': {
          '$gte': gteBlockNum
        }
      }).remove();
    }
  }]);

  return Database;
}();

export default Database;
//# sourceMappingURL=database.js.map