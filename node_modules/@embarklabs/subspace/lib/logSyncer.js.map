{"version":3,"sources":["../src/logSyncer.js"],"names":["fromEvent","ReplaySubject","hash","LogSyncer","web3","events","db","filterConditions","eventKey","err","ev","Error","address","toLowerCase","topics","shouldSkip","topic","i","emit","subscriptions","options","inputsABI","gteBlockNum","networkId","fromBlock","toBlock","deleteNewestBlocks","eventSummary","getLastKnownEvent","sub","logObserver","subscribe","e","id","eventName","blockNumber","transactionIndex","logIndex","eventData","data","removed","obsData","returnValues","eth","abi","decodeLog","next","deleteEvent","eventExists","recordEvent","eth_subscribe","_retrieveEvents","firstKnownBlock","lastKnownBlock","og_subscribe","error","complete","s","apply","add","unsubscribe","_serveDBEvents","filters","_subscribeToEvent","_getPastEvents","cb","_parseEventCBFactory","storedEvents","getEventsFor","x","getPastLogs","logs","l","push"],"mappings":"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","sourcesContent":["import { fromEvent, ReplaySubject } from 'rxjs';\nimport hash from 'object-hash';\n\nclass LogSyncer {\n  constructor(web3, events, db) {\n    this.events = events;\n    this.web3 = web3;\n    this.db = db;\n\n    this.subscriptions = [];\n  }\n\n  track(options, inputsABI, gteBlockNum, networkId){\n    const eventKey = 'logs-' + hash(Object.assign({networkId}, options || {}));\n    const filterConditions = Object.assign({fromBlock: 0, toBlock: \"latest\"}, options || {});\n\n    this.db.deleteNewestBlocks(eventKey, gteBlockNum);\n\n    const eventSummary = this.db.getLastKnownEvent(eventKey);\n    const sub = new ReplaySubject();\n    const logObserver = fromEvent(this.events, eventKey)\n\n    logObserver.subscribe((e) => {\n      if (!e) return;\n\n      const id = hash({eventName: eventKey, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex});\n\n      // TODO: would be nice if this was smart enough to understand the type of returnValues and do the needed conversions\n      const eventData = {\n        id: hash({eventName: eventKey, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex}),\n        data: e.data,\n        address: e.address,\n        topics: e.topics,\n        removed: e.removed\n      }\n\n      const obsData = {blockNumber: e.blockNumber, data: e.data, address: e.address, topics: e.topics};\n\n      if(inputsABI){\n        eventData.returnValues = web3.eth.abi.decodeLog(inputsABI, e.data, e.topics.slice(1));\n        obsData.returnValues = eventData.returnValues;\n      }\n\n      // TODO: test reorgs\n\n      sub.next(obsData);\n\n      if(e.removed){\n        this.db.deleteEvent(eventKey, id);\n        return;\n      }\n\n      if (this.db.eventExists(eventKey, eventData.id)) return;\n\n      this.db.recordEvent(eventKey, eventData);\n\n      this.events.emit(\"updateDB\");\n    });\n\n    const eth_subscribe = this._retrieveEvents(eventKey,\n                                           eventSummary.firstKnownBlock,\n                                           eventSummary.lastKnownBlock,\n                                           filterConditions\n                                          );\n\n    const og_subscribe = sub.subscribe;\n    sub.subscribe = (next, error, complete) => {\n      const s = og_subscribe.apply(sub, [next, error, complete]);\n      s.add(() => { // Removing web3js subscription when rxJS unsubscribe is executed\n        if (eth_subscribe) eth_subscribe.unsubscribe();\n      });\n      return s;\n    }\n\n    return sub;\n  }\n\n  _retrieveEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions) {\n    // TODO: this should be moved to a 'smart' module\n    // it should be able to do events X at the time to avoid slow downs as well as the 10k limit\n    if (firstKnownBlock == 0 || (firstKnownBlock > 0 && firstKnownBlock <= filterConditions.fromBlock)) {\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a event subscription [lastKnownBlock + 1, ...]\n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        return this._subscribeToEvent(filters, eventKey);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, filterConditions.toBlock, filterConditions);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a past event subscription [lastKnownBlock + 1, toBlock]\n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        this._getPastEvents(filters, eventKey);\n      }\n    }\n    else if (firstKnownBlock > 0) {\n      // create a past event subscription [ firstKnownBlock > fromBlock ? fromBlock : 0, firstKnownBlock - 1]\n      let fromBlock = firstKnownBlock > filterConditions.fromBlock ? filterConditions.fromBlock : 0;\n      let filters = Object.assign({}, filterConditions, { fromBlock, toBlock: firstKnownBlock - 1 });\n      this._getPastEvents(filters, eventKey);\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [firstKnownBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions);\n        // create a subscription [lastKnownBlock + 1, ...]\n        const filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1 });\n        return this._subscribeToEvent(filters, eventKey);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, filterConditions.toBlock, filterConditions);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a past event subscription [lastKnownBlock + 1, toBlock]\n        let filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1, toBlock: filterConditions.toBlock });\n        this._getPastEvents(filters, eventKey);\n      }\n    }\n  }\n\n  _serveDBEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions) {\n    const cb = this._parseEventCBFactory(filterConditions, eventKey);\n    const storedEvents = this.db.getEventsFor(eventKey).filter(x => x.blockNumber >= firstKnownBlock && x.blockNumber <= lastKnownBlock);\n    storedEvents.forEach(ev => {\n      cb(null, ev);\n    });\n  }\n\n  _getPastEvents(filterConditions, eventKey) {\n    const cb = this._parseEventCBFactory(filterConditions, eventKey);\n    this.web3.getPastLogs(options, (err, logs) => {\n      if(err) {\n        throw new Error(err);\n      }\n\n      logs.forEach(l => {\n        cb(null, l);\n      })\n    });\n  }\n\n  _subscribeToEvent(filterConditions, eventKey) {\n    const s = this.web3.subscribe('logs', filterConditions, this._parseEventCBFactory(filterConditions, eventKey));\n    this.subscriptions.push(s);\n    return s;\n  }\n\n  _parseEventCBFactory = (filterConditions, eventKey) => (err, ev) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (filterConditions) {\n      if (filterConditions.address && ev.address.toLowerCase() !== filterConditions.address.toLowerCase()) return;\n      if (filterConditions.topics){\n        let shouldSkip = false;\n        filterConditions.topics.forEach((topic, i) => {\n          if (topic != null && (!ev.topics[i] || ev.topics[i].toLowerCase() !== topic.toLowerCase())){\n            shouldSkip = true;\n          }\n        });\n        if(shouldSkip) return;\n      }\n    }\n\n    this.events.emit(eventKey, ev);\n  }\n\n  close(){\n    this.subscriptions.forEach(x => {\n      x.unsubscribe();\n    })\n  }\n}\n\nexport default LogSyncer;\n"],"file":"logSyncer.js"}