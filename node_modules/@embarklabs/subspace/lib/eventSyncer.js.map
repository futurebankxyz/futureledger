{"version":3,"sources":["../src/eventSyncer.js"],"names":["fromEvent","ReplaySubject","hash","HttpEventScanner","WsEventScanner","EventSyncer","web3","events","db","isWebsocketProvider","eventKey","contractInstance","eventName","filters","fromBlock","toBlock","hardLimit","getPastEvents","cb","callbackFactory","ev","emit","storedEvents","getEventsFor","x","blockNumber","subscriptions","s","push","filterConditions","err","console","error","propsToFilter","prop","returnValues","eventScanner","gteBlockNum","networkId","address","options","deleteNewestBlocks","lastKnownBlock","getLastKnownEvent","firstKnownBlock","getFirstKnownEvent","sub","contractObserver","subscribe","e","complete","id","transactionIndex","logIndex","eventData","removed","next","deleteEvent","eventExists","recordEvent","fnDBEvents","serveDBEvents","fnPastEvents","fnSubscribe","subscribeToEvent","eth_subscribe","scan","og_subscribe","apply","add","then","susc","unsubscribe","close"],"mappings":"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","sourcesContent":["import { fromEvent, ReplaySubject } from 'rxjs';\nimport hash from 'object-hash';\nimport HttpEventScanner from './httpEventScanner';\nimport WsEventScanner from './wsEventScanner';\n\nclass EventSyncer {\n\n  constructor(web3, events, db, isWebsocketProvider) {\n    this.events = events;\n    this.web3 = web3;\n    this.db = db;\n    this.isWebsocketProvider = isWebsocketProvider;\n    this.eventScanner = isWebsocketProvider ? new WsEventScanner(web3) : new HttpEventScanner(web3);\n  }\n\n  track(contractInstance, eventName, filters, gteBlockNum, networkId) {\n    const eventKey =  hash(Object.assign({address: contractInstance.options.address, networkId}, (filters || {})));\n\n    this.db.deleteNewestBlocks(eventKey, gteBlockNum);\n\n    let filterConditions = Object.assign({fromBlock: 0, toBlock: \"latest\"}, filters || {});\n    let lastKnownBlock = this.db.getLastKnownEvent(eventKey);\n    let firstKnownBlock = this.db.getFirstKnownEvent(eventKey);\n\n\n    let sub = new ReplaySubject();\n    let contractObserver = fromEvent(this.events, eventKey)\n\n    contractObserver.subscribe((e) => {\n      if (!e) {\n        sub.complete();\n        return;\n      }\n\n      const id = hash({eventName, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex});\n\n      // TODO: would be nice if this was smart enough to understand the type of returnValues and do the needed conversions\n      const eventData = {\n        id,\n        returnValues: {...e.returnValues},\n        blockNumber: e.blockNumber, \n        transactionIndex: e.transactionIndex, \n        logIndex: e.logIndex,\n        removed: e.removed\n      }\n\n      // TODO: test reorgs\n      sub.next({blockNumber: e.blockNumber, ...e.returnValues});\t\n\n      if (e.removed){\n        this.db.deleteEvent(eventKey, id);\n        return;\n      }\n\n      if (this.db.eventExists(eventKey, eventData.id)) return;\n\n      this.db.recordEvent(eventKey, eventData);\n\n      this.events.emit(\"updateDB\");\n    });\n\n\n    const fnDBEvents = this.serveDBEvents(eventKey);\n    const fnPastEvents = this.getPastEvents(eventKey, contractInstance, eventName, filters);\n\n    if(this.isWebsocketProvider){\n      const fnSubscribe = this.subscribeToEvent(eventKey, contractInstance, eventName);\n      const eth_subscribe = this.eventScanner.scan(fnDBEvents, fnPastEvents, fnSubscribe, firstKnownBlock, lastKnownBlock, filterConditions);\n\n      const og_subscribe = sub.subscribe;\n      sub.subscribe = async (next, error, complete) => {\n        const s = og_subscribe.apply(sub, [next, error, complete]);\n        s.add(() => { // Removing web3js subscription when rxJS unsubscribe is executed\n          eth_subscribe.then(susc => {\n            if(susc) {\n              susc.unsubscribe();\n            }\n          });\n        });\n        return s;\n      }\n    } else {\n      this.eventScanner.scan(fnDBEvents, fnPastEvents, lastKnownBlock, filterConditions);\n    }\n\n    return sub;\n  }\n\n  getPastEvents = (eventKey, contractInstance, eventName, filters) => async (fromBlock, toBlock, hardLimit) => { \n    let events = await contractInstance.getPastEvents(eventName, { ...filters, fromBlock, toBlock });  \n    const cb = this.callbackFactory(filters, eventKey);\n    \n    events.forEach(ev => cb(null, ev));\n\n    if(hardLimit && toBlock === hardLimit){ // Complete the observable\n      this.events.emit(eventKey);\n    }\n  }\n\n  serveDBEvents = eventKey => (filters, toBlock, fromBlock = null) => {\n    const cb = this.callbackFactory(filters, eventKey);\n    const storedEvents = this.db.getEventsFor(eventKey).filter(x => x.blockNumber >= (fromBlock || filters.fromBlock) && x.blockNumber <= toBlock);\n    storedEvents.forEach(ev => {\n      cb(null, ev);\n    });\n  }\n\n  subscribeToEvent = (eventKey, contractInstance, eventName) => (subscriptions, filters) => {\n    const cb = this.callbackFactory(filters, eventKey);\n    const s = contractInstance.events[eventName](filters, cb);\n    subscriptions.push(s);\n    return s;\n  }\n\n  callbackFactory = (filterConditions, eventKey) => (err, ev) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    if (filterConditions) {\n      let propsToFilter = [];\n      for (let prop in filterConditions.filter) {\n        if (Object.keys(ev.returnValues).indexOf(prop) >= 0) {\n          propsToFilter.push(prop);\n        }\n      }\n      for (let prop of propsToFilter) {\n        if (filterConditions.filter[prop] !== ev.returnValues[prop]) return;\n      }\n    }\n\n    this.events.emit(eventKey, ev);\n  }\n\n  close(){\n    this.eventScanner.close();\n  }\n}\n\nexport default EventSyncer;\n"],"file":"eventSyncer.js"}