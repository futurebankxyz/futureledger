import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$values from "@babel/runtime-corejs3/core-js-stable/object/values";
import { of, pipe } from 'rxjs';
import { map, pluck, scan } from 'rxjs/operators';
export function $takeProps() {
  var args = _Object$values(arguments);

  return pipe(map(function (v) {
    var r = {};

    _forEachInstanceProperty(args).call(args, function (a) {
      r[a] = v[a];
    });

    return r;
  }));
}
/*
// ex 1
of({a: 1, b:2, e: 1}, {a: 0, c: 1, b:3}, {a: 0, d: 1, b:1})
  .pipe($takeProps("a", "b", "e"))
  .subscribe((v) => console.log(v));
*/

export function $average(cb) {
  return pipe(scan(function (accum, curr) {
    var currentValue;

    if (typeof cb === 'string' || cb instanceof String) {
      currentValue = curr[cb];
    } else if (typeof cb === "function") {
      currentValue = cb(curr);
    } else {
      currentValue = curr;
    }

    return {
      sum: accum.sum + currentValue,
      count: accum.count + 1
    };
  }, {
    sum: 0,
    count: 0
  }), map(function (o) {
    return o.sum / o.count;
  }));
}
export function $max(cb) {
  return pipe(scan(function (acc, curr) {
    var currentValue;

    if (typeof cb === 'string' || cb instanceof String) {
      currentValue = curr[cb];
    } else if (typeof cb === "function") {
      currentValue = cb(curr);
    } else {
      currentValue = curr;
    }

    if (currentValue > acc) return currentValue;
    return acc;
  }));
}
export function $min(cb) {
  return pipe(scan(function (acc, curr) {
    var currentValue;

    if (typeof cb === 'string' || cb instanceof String) {
      currentValue = curr[cb];
    } else if (typeof cb === "function") {
      currentValue = cb(curr);
    } else {
      currentValue = curr;
    }

    if (currentValue < acc) return currentValue;
    return acc;
  }));
}
export function $latest(num) {
  return pipe(scan(function (acc, curr) {
    var currentValue = curr;
    acc.push(currentValue);

    if (acc.length > num) {
      acc.shift();
    }

    return acc;
  }, []));
}
/*
of(10, 3, 4)
  .pipe($average())
  .subscribe((v) => console.log(v));
*/
//# sourceMappingURL=operators.js.map