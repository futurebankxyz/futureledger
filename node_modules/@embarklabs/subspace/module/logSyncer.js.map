{"version":3,"sources":["../src/logSyncer.js"],"names":["fromEvent","ReplaySubject","hash","LogSyncer","constructor","web3","events","db","filterConditions","eventKey","err","ev","Error","address","toLowerCase","topics","shouldSkip","topic","i","emit","subscriptions","track","options","inputsABI","gteBlockNum","networkId","fromBlock","toBlock","deleteNewestBlocks","eventSummary","getLastKnownEvent","sub","logObserver","subscribe","e","id","eventName","blockNumber","transactionIndex","logIndex","eventData","data","removed","obsData","returnValues","eth","abi","decodeLog","next","deleteEvent","eventExists","recordEvent","eth_subscribe","_retrieveEvents","firstKnownBlock","lastKnownBlock","og_subscribe","error","complete","s","apply","add","unsubscribe","_serveDBEvents","filters","_subscribeToEvent","_getPastEvents","cb","_parseEventCBFactory","storedEvents","getEventsFor","x","getPastLogs","logs","l","push","close"],"mappings":"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","sourcesContent":["import { fromEvent, ReplaySubject } from 'rxjs';\nimport hash from 'object-hash';\n\nclass LogSyncer {\n  constructor(web3, events, db) {\n    this.events = events;\n    this.web3 = web3;\n    this.db = db;\n\n    this.subscriptions = [];\n  }\n\n  track(options, inputsABI, gteBlockNum, networkId){\n    const eventKey = 'logs-' + hash(Object.assign({networkId}, options || {}));\n    const filterConditions = Object.assign({fromBlock: 0, toBlock: \"latest\"}, options || {});\n\n    this.db.deleteNewestBlocks(eventKey, gteBlockNum);\n\n    const eventSummary = this.db.getLastKnownEvent(eventKey);\n    const sub = new ReplaySubject();\n    const logObserver = fromEvent(this.events, eventKey)\n\n    logObserver.subscribe((e) => {\n      if (!e) return;\n\n      const id = hash({eventName: eventKey, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex});\n\n      // TODO: would be nice if this was smart enough to understand the type of returnValues and do the needed conversions\n      const eventData = {\n        id: hash({eventName: eventKey, blockNumber: e.blockNumber, transactionIndex: e.transactionIndex, logIndex: e.logIndex}),\n        data: e.data,\n        address: e.address,\n        topics: e.topics,\n        removed: e.removed\n      }\n\n      const obsData = {blockNumber: e.blockNumber, data: e.data, address: e.address, topics: e.topics};\n\n      if(inputsABI){\n        eventData.returnValues = web3.eth.abi.decodeLog(inputsABI, e.data, e.topics.slice(1));\n        obsData.returnValues = eventData.returnValues;\n      }\n\n      // TODO: test reorgs\n\n      sub.next(obsData);\n\n      if(e.removed){\n        this.db.deleteEvent(eventKey, id);\n        return;\n      }\n\n      if (this.db.eventExists(eventKey, eventData.id)) return;\n\n      this.db.recordEvent(eventKey, eventData);\n\n      this.events.emit(\"updateDB\");\n    });\n\n    const eth_subscribe = this._retrieveEvents(eventKey,\n                                           eventSummary.firstKnownBlock,\n                                           eventSummary.lastKnownBlock,\n                                           filterConditions\n                                          );\n\n    const og_subscribe = sub.subscribe;\n    sub.subscribe = (next, error, complete) => {\n      const s = og_subscribe.apply(sub, [next, error, complete]);\n      s.add(() => { // Removing web3js subscription when rxJS unsubscribe is executed\n        if (eth_subscribe) eth_subscribe.unsubscribe();\n      });\n      return s;\n    }\n\n    return sub;\n  }\n\n  _retrieveEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions) {\n    // TODO: this should be moved to a 'smart' module\n    // it should be able to do events X at the time to avoid slow downs as well as the 10k limit\n    if (firstKnownBlock == 0 || (firstKnownBlock > 0 && firstKnownBlock <= filterConditions.fromBlock)) {\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a event subscription [lastKnownBlock + 1, ...]\n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        return this._subscribeToEvent(filters, eventKey);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, filterConditions.toBlock, filterConditions);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a past event subscription [lastKnownBlock + 1, toBlock]\n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        this._getPastEvents(filters, eventKey);\n      }\n    }\n    else if (firstKnownBlock > 0) {\n      // create a past event subscription [ firstKnownBlock > fromBlock ? fromBlock : 0, firstKnownBlock - 1]\n      let fromBlock = firstKnownBlock > filterConditions.fromBlock ? filterConditions.fromBlock : 0;\n      let filters = Object.assign({}, filterConditions, { fromBlock, toBlock: firstKnownBlock - 1 });\n      this._getPastEvents(filters, eventKey);\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [firstKnownBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions);\n        // create a subscription [lastKnownBlock + 1, ...]\n        const filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1 });\n        return this._subscribeToEvent(filters, eventKey);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, filterConditions.toBlock, filterConditions);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        this._serveDBEvents(eventKey, filterConditions.fromBlock, lastKnownBlock, filterConditions);\n        // create a past event subscription [lastKnownBlock + 1, toBlock]\n        let filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1, toBlock: filterConditions.toBlock });\n        this._getPastEvents(filters, eventKey);\n      }\n    }\n  }\n\n  _serveDBEvents(eventKey, firstKnownBlock, lastKnownBlock, filterConditions) {\n    const cb = this._parseEventCBFactory(filterConditions, eventKey);\n    const storedEvents = this.db.getEventsFor(eventKey).filter(x => x.blockNumber >= firstKnownBlock && x.blockNumber <= lastKnownBlock);\n    storedEvents.forEach(ev => {\n      cb(null, ev);\n    });\n  }\n\n  _getPastEvents(filterConditions, eventKey) {\n    const cb = this._parseEventCBFactory(filterConditions, eventKey);\n    this.web3.getPastLogs(options, (err, logs) => {\n      if(err) {\n        throw new Error(err);\n      }\n\n      logs.forEach(l => {\n        cb(null, l);\n      })\n    });\n  }\n\n  _subscribeToEvent(filterConditions, eventKey) {\n    const s = this.web3.subscribe('logs', filterConditions, this._parseEventCBFactory(filterConditions, eventKey));\n    this.subscriptions.push(s);\n    return s;\n  }\n\n  _parseEventCBFactory = (filterConditions, eventKey) => (err, ev) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (filterConditions) {\n      if (filterConditions.address && ev.address.toLowerCase() !== filterConditions.address.toLowerCase()) return;\n      if (filterConditions.topics){\n        let shouldSkip = false;\n        filterConditions.topics.forEach((topic, i) => {\n          if (topic != null && (!ev.topics[i] || ev.topics[i].toLowerCase() !== topic.toLowerCase())){\n            shouldSkip = true;\n          }\n        });\n        if(shouldSkip) return;\n      }\n    }\n\n    this.events.emit(eventKey, ev);\n  }\n\n  close(){\n    this.subscriptions.forEach(x => {\n      x.unsubscribe();\n    })\n  }\n}\n\nexport default LogSyncer;\n"],"file":"logSyncer.js"}