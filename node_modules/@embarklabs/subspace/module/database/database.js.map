{"version":3,"sources":["../../src/database/database.js"],"names":["fromEvent","loki","getENV","global","android","NSObject","window","document","URL","Database","constructor","dbFilename","events","cb","db","autoload","autoloadCallback","databaseInitialize","autosave","env","autosaveInterval","dbChanges","subscribe","saveDatabase","getLastKnownEvent","eventKey","collection","getCollection","count","max","addCollection","getFirstKnownEvent","min","getEventsFor","children","eventExists","eventId","length","recordEvent","values","insert","deleteEvent","chain","remove","deleteNewestBlocks","gteBlockNum"],"mappings":"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","sourcesContent":["import { fromEvent } from 'rxjs';\nimport loki from 'lokijs';\n\nconst getENV = function () {\n  if (typeof global !== 'undefined' && (global.android || global.NSObject)) {\n     // If no adapter assume nativescript which needs adapter to be passed manually\n     return 'NATIVESCRIPT'; //nativescript\n  }\n\n  if (typeof window === 'undefined') {\n    return 'NODEJS';\n  } \n\n  // TODO: LokiJS determines it's running in a browser if process is undefined, \n  // yet we need webpack shim for process in a different package.\n  // this code ignores is the same getENV from loki except for the check for node webkit\n\n  if (typeof document !== 'undefined') {\n    if (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1) {\n      return 'CORDOVA';\n    }\n    return 'BROWSER';\n  }\n\n  return 'CORDOVA';\n};\n\nclass Database {\n\n  constructor(dbFilename, events, cb) {\n    this.db = new loki(dbFilename, {\n      autoload: true,\n      autoloadCallback: () => {\n        this.databaseInitialize()\n      },\n      autosave: true,\n      env: getENV(),\n      autosaveInterval: 2000\n    });\n\n    this.events = events;\n  }\n\n  databaseInitialize(cb) {\n    let dbChanges = fromEvent(this.events, \"updateDB\")\n    dbChanges.subscribe(() => {\n      this.db.saveDatabase()\n    })\n  }\n\n  getLastKnownEvent(eventKey) {\n    const collection = this.db.getCollection(eventKey);\n    if (collection && collection.count()){\n      return collection.max('blockNumber');\n    } else {\n      this.db.addCollection(eventKey);\n    }\n    return 0;\n  }\n\n  getFirstKnownEvent(eventKey) {\n    const collection = this.db.getCollection(eventKey);\n    if (collection && collection.count()){\n      return collection.min('blockNumber');\n    } else {\n      this.db.addCollection(eventKey);\n    }\n    return 0;\n  }\n\n  getEventsFor(eventKey) {\n    let children = this.db.getCollection(eventKey);\n    return children.find();\n  }\n\n  eventExists(eventKey, eventId) {\n    let collection = this.db.getCollection(eventKey);\n    if(!collection){\n      this.db.addCollection(eventKey);\n      return false;\n    }\n\n    return (collection.find({ 'id': eventId }).length > 0);\n  }\n\n  recordEvent(eventKey, values) {\n    let children = this.db.getCollection(eventKey);\n    children.insert(values);\n  }\n\n  deleteEvent(eventKey, eventId) {\n    const collection = this.db.getCollection(eventKey);\n    if(collection)\n    collection.chain().find({ 'id': eventId }).remove();\n  }\n\n  deleteNewestBlocks(eventKey, gteBlockNum) {\n    if(gteBlockNum <= 0) return;\n    \n    const collection = this.db.getCollection(eventKey);\n    if(collection)\n    collection.chain().find({ 'blockNumber': {'$gte': gteBlockNum}}).remove();\n  }\n\n}\n\nexport default Database;\n"],"file":"database.js"}