{"version":3,"sources":["../src/wsEventScanner.js"],"names":["WsEventScanner","constructor","web3","subscriptions","scan","serveDBEvents","getPastEvents","subscribe","firstKnownBlock","lastKnownBlock","filterConditions","lastBlockNumberAtLoad","getBlockNumber","toBlockFilter","toBlock","toBlockInPast","hardLimit","fromBlock","filters","close","x","unsubscribe"],"mappings":";;;AAAA,MAAMA,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;;AAED,QAAMC,IAAN,CAAWC,aAAX,EAA0BC,aAA1B,EAAyCC,SAAzC,EAAoDC,eAApD,EAAqEC,cAArE,EAAqFC,gBAArF,EAAuG;AACrG,UAAMC,qBAAqB,GAAG,MAAM,KAAKT,IAAL,CAAUU,cAAV,EAApC,CADqG,CAGrG;;AACA,QAAIC,aAAa,GAAG,CAApB;;AACA,QAAGH,gBAAgB,CAACI,OAAjB,IAA4BJ,gBAAgB,CAACI,OAAjB,KAA6B,QAA5D,EAAsE;AACpED,MAAAA,aAAa,GAAGH,gBAAgB,CAACI,OAAjC;AACD;;AACD,UAAMC,aAAa,GAAIF,aAAa,IAAIA,aAAa,GAAGF,qBAAxD;AACA,UAAMK,SAAS,GAAGD,aAAa,GAAGF,aAAH,GAAmB,IAAlD;;AAEA,QAAIL,eAAe,IAAI,CAAnB,IAAyBA,eAAe,GAAG,CAAlB,IAAuBA,eAAe,IAAIE,gBAAgB,CAACO,SAAxF,EAAoG;AAClG,UAAIP,gBAAgB,CAACI,OAAjB,KAA6B,QAAjC,EAA2C;AACzC;AACAT,QAAAA,aAAa,CAACK,gBAAD,EAAmBD,cAAnB,CAAb,CAFyC,CAGzC;;AACA,YAAIS,OAAO,GAAG,eAAc,EAAd,EAAkBR,gBAAlB,EAAoC;AAAEO,UAAAA,SAAS,EAAEP,gBAAgB,CAACO,SAAjB,GAA6BR,cAA7B,GAA8CC,gBAAgB,CAACO,SAA/D,GAA2ER,cAAc,GAAG;AAAzG,SAApC,CAAd;;AACA,eAAOF,SAAS,CAAC,KAAKJ,aAAN,EAAqBe,OAArB,CAAhB;AACD,OAND,MAOK,IAAIR,gBAAgB,CAACI,OAAjB,IAA4BL,cAAhC,EAAgD;AACnD;AACAJ,QAAAA,aAAa,CAACK,gBAAD,EAAmBA,gBAAgB,CAACI,OAApC,CAAb;AACD,OAHI,MAIA;AACH;AACAT,QAAAA,aAAa,CAACK,gBAAD,EAAmBD,cAAnB,CAAb,CAFG,CAGH;;AACA,cAAMQ,SAAS,GAAGP,gBAAgB,CAACO,SAAjB,GAA6BR,cAA7B,GAA8CC,gBAAgB,CAACO,SAA/D,GAA2ER,cAAc,GAAG,CAA9G;AACA,cAAMH,aAAa,CAACW,SAAD,EAAYP,gBAAgB,CAACI,OAA7B,EAAsCE,SAAtC,CAAnB;AACD;AACF,KAnBD,MAoBK,IAAIR,eAAe,GAAG,CAAtB,EAAyB;AAC5B;AACA,YAAMS,SAAS,GAAGT,eAAe,GAAGE,gBAAgB,CAACO,SAAnC,GAA+CP,gBAAgB,CAACO,SAAhE,GAA4E,CAA9F;AACA,YAAMX,aAAa,CAACW,SAAD,EAAYT,eAAe,GAAG,CAA9B,EAAiCQ,SAAjC,CAAnB;;AAEA,UAAIN,gBAAgB,CAACI,OAAjB,KAA6B,QAAjC,EAA2C;AACzC;AACAT,QAAAA,aAAa,CAACK,gBAAD,EAAmBD,cAAnB,EAAmCD,eAAnC,CAAb,CAFyC,CAGzC;;AACA,cAAMU,OAAO,GAAG,eAAc,EAAd,EAAkBR,gBAAlB,EAAoC;AAAEO,UAAAA,SAAS,EAAER,cAAc,GAAG;AAA9B,SAApC,CAAhB;;AACA,eAAOF,SAAS,CAAC,KAAKJ,aAAN,EAAqBe,OAArB,CAAhB;AACD,OAND,MAOK,IAAIR,gBAAgB,CAACI,OAAjB,IAA4BL,cAAhC,EAAgD;AACnD;AACAJ,QAAAA,aAAa,CAACK,gBAAD,EAAmBA,gBAAgB,CAACI,OAApC,CAAb;AACD,OAHI,MAIA;AACH;AACAT,QAAAA,aAAa,CAACK,gBAAD,EAAmBD,cAAnB,CAAb,CAFG,CAGH;;AACA,cAAMH,aAAa,CAACG,cAAc,GAAG,CAAlB,EAAqBC,gBAAgB,CAACI,OAAtC,EAA+CE,SAA/C,CAAnB;AACD;AACF;AACF;;AAEDG,EAAAA,KAAK,GAAE;AAAA;;AACL,6CAAKhB,aAAL,iBAA2BiB,CAAC,IAAIA,CAAC,CAACC,WAAF,EAAhC;AACD;;AAhEkB;;AAmErB,eAAerB,cAAf","sourcesContent":["class WsEventScanner {\n  constructor(web3) {\n    this.web3 = web3;\n    this.subscriptions = [];\n  }\n\n  async scan(serveDBEvents, getPastEvents, subscribe, firstKnownBlock, lastKnownBlock, filterConditions) {\n    const lastBlockNumberAtLoad = await this.web3.getBlockNumber();\n\n    // If there's a toBlock with a number\n    let toBlockFilter = 0;\n    if(filterConditions.toBlock && filterConditions.toBlock !== 'latest' ){\n      toBlockFilter = filterConditions.toBlock;\n    }\n    const toBlockInPast =  toBlockFilter && toBlockFilter < lastBlockNumberAtLoad;\n    const hardLimit = toBlockInPast ? toBlockFilter : null;\n    \n    if (firstKnownBlock == 0 || (firstKnownBlock > 0 && firstKnownBlock <= filterConditions.fromBlock)) {\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock);\n        // create a event subscription [lastKnownBlock + 1, ...] \n        let filters = Object.assign({}, filterConditions, { fromBlock: filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1 });\n        return subscribe(this.subscriptions, filters);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        serveDBEvents(filterConditions, filterConditions.toBlock);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock);\n        // get past events [lastKnownBlock + 1, toBlock]\n        const fromBlock = filterConditions.fromBlock > lastKnownBlock ? filterConditions.fromBlock : lastKnownBlock + 1;\n        await getPastEvents(fromBlock, filterConditions.toBlock, hardLimit);  \n      }\n    }\n    else if (firstKnownBlock > 0) {\n      // get past events [ firstKnownBlock > fromBlock ? fromBlock : 0, firstKnownBlock - 1]\n      const fromBlock = firstKnownBlock > filterConditions.fromBlock ? filterConditions.fromBlock : 0;\n      await getPastEvents(fromBlock, firstKnownBlock - 1, hardLimit);  \n\n      if (filterConditions.toBlock === 'latest') {\n        // emit DB Events [firstKnownBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock, firstKnownBlock);\n        // create a subscription [lastKnownBlock + 1, ...]\n        const filters = Object.assign({}, filterConditions, { fromBlock: lastKnownBlock + 1 });\n        return subscribe(this.subscriptions, filters);\n      }\n      else if (filterConditions.toBlock <= lastKnownBlock) {\n        // emit DB Events [fromBlock, toBlock]\n        serveDBEvents(filterConditions, filterConditions.toBlock);\n      }\n      else {\n        // emit DB Events [fromBlock, lastKnownBlock]\n        serveDBEvents(filterConditions, lastKnownBlock);\n        // get past events [lastKnownBlock + 1, toBlock]\n        await getPastEvents(lastKnownBlock + 1, filterConditions.toBlock, hardLimit);  \n      }\n    }\n  }\n\n  close(){\n    this.subscriptions.forEach(x => x.unsubscribe());\n  }\n}\n\nexport default WsEventScanner;\n"],"file":"wsEventScanner.js"}