import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
import React, { Component } from "react";
import { isObservable } from "rxjs";
export function observe(WrappedComponent) {
  var _temp;

  return _temp = class extends Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "state", {
        observedValues: {},
        subscriptions: {}
      });

      _defineProperty(this, "unsubscribe", prop => {
        const subscriptions = { ...this.state.subscriptions
        };
        if (subscriptions[prop]) subscriptions[prop].unsubscribe();
        delete subscriptions[prop];
        this.setState({
          subscriptions
        });
      });

      _defineProperty(this, "subscribeToProp", prop => {
        if (!isObservable(this.props[prop])) return;
        const subscription = this.props[prop].subscribe(value => {
          this.setState(state => ({
            observedValues: { ...state.observedValues,
              [prop]: value
            }
          }));
        }, err => {
          // TODO: pass the error to the wrapped component
          console.error(err);
        });
        this.setState({
          subscriptions: { ...this.state.subscriptions,
            [prop]: subscription
          }
        });
      });
    }

    componentDidMount() {
      var _context;

      _forEachInstanceProperty(_context = _Object$keys(this.props)).call(_context, this.subscribeToProp);
    }

    componentWillUnmount() {
      var _context2;

      _forEachInstanceProperty(_context2 = _Object$keys(this.state.subscriptions)).call(_context2, subscription => {
        this.unsubscribe(subscription);
      });
    }

    componentDidUpdate(prevProps) {
      var _context3;

      _forEachInstanceProperty(_context3 = _Object$keys(prevProps)).call(_context3, prop => {
        if (!prevProps[prop] && this.props[prop]) {
          this.subscribeToProp(prop);
        } else if (prevProps[prop] !== this.props[prop]) {
          this.unsubscribe(prop);
          this.subscribeToProp(prop);
        }
      });
    }

    render() {
      var _context4;

      const props = _reduceInstanceProperty(_context4 = _Object$keys(this.props)).call(_context4, (accum, curr) => {
        if (!isObservable(this.props[curr])) {
          accum[curr] = this.props[curr];
          return accum;
        }

        return accum;
      }, {});

      return React.createElement(WrappedComponent, { ...props,
        ...this.state.observedValues
      });
    }

  }, _temp;
}
//# sourceMappingURL=index.js.map