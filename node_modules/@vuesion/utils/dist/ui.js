"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-console */
const chalk_1 = require("chalk");
const util_1 = require("util");
exports.log = (message) => console.log(chalk_1.default.white(message));
exports.logInfo = (message) => console.log(chalk_1.default.blue(message));
exports.logError = (message) => console.log(chalk_1.default.red(message));
exports.logSuccess = (message) => console.log(chalk_1.default.green(message));
exports.logWarning = (message) => console.log(chalk_1.default.yellow(message));
exports.logBold = (message) => console.log(chalk_1.default.white.bold(message));
exports.logInfoBold = (message) => console.log(chalk_1.default.blue.bold(message));
exports.logErrorBold = (message) => console.log(chalk_1.default.red.bold(message));
exports.logSuccessBold = (message) => console.log(chalk_1.default.green.bold(message));
exports.logWarningBold = (message) => console.log(chalk_1.default.yellow.bold(message));
exports.HeadLine = (message) => {
    exports.logInfoBold(message);
};
exports.Result = (message) => {
    exports.logSuccessBold('✓ ' + message);
};
class Spinner {
    constructor() {
        this.spinner = ['◜', '◠', '◝', '◞', '◡', '◟'];
        this.timer = null;
        this.message = '';
        this.start = (debug = false) => {
            if (debug) {
                return;
            }
            const play = (arr) => {
                const len = arr.length;
                let i = 0;
                const drawTick = () => {
                    const str = arr[i++ % len];
                    process.stdout.write('\u001b[0G' + str + '\u001b[90m' + this.message + '\u001b[0m');
                };
                this.timer = setInterval(drawTick, 100);
            };
            const frames = this.spinner.map((c) => {
                return util_1.format('\u001b[96m%s ', c);
            });
            play(frames);
        };
        this.stop = (err = false) => {
            if (err) {
                process.stdout.write('\u001b[0G\u001b[2K' + chalk_1.default.red(`✗ An error occurred.`));
            }
            else {
                process.stdout.write('\u001b[0G\u001b[2K' + chalk_1.default.green(`✓ ${this.message}`));
            }
            exports.log('');
            exports.log('');
            clearInterval(this.timer);
        };
    }
}
exports.Spinner = Spinner;
