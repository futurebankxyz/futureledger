"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Cookies = require("js-cookie");
const merge = require("deepmerge");
class PersistCookieStorage {
    constructor(modules = [], options = { cookieOptions: {} }, prefix = 'vuexpersist') {
        this.modules = modules;
        this.prefix = prefix;
        this.options = options;
        this.forceInitialState = true;
    }
    static getCookiesFromState(cookies, state) {
        const vuexPersistCookie = JSON.parse(cookies[this.indexKey] || '{}');
        const result = [];
        Object.keys(cookies)
            .filter((key) => key !== this.indexKey)
            .forEach((key) => {
            const mappedKey = vuexPersistCookie[key];
            const cookieState = mappedKey ? JSON.parse(cookies[key]) : {};
            const newCookieState = {};
            Object.keys(cookieState).forEach((k) => {
                newCookieState[k] = state[mappedKey][k];
            });
            if (mappedKey) {
                result.push({ name: key, value: JSON.stringify(newCookieState) });
            }
        });
        return result;
    }
    static getMergedStateFromServerContext(cookies, state) {
        const vuexPersistCookie = JSON.parse(cookies[this.indexKey] || '{}');
        const cookieState = {};
        Object.keys(cookies).forEach((key) => {
            const mappedKey = vuexPersistCookie[key];
            if (mappedKey) {
                try {
                    cookieState[mappedKey] = JSON.parse(cookies[key]);
                }
                catch (e) {
                    cookieState[mappedKey] = state[mappedKey] || {};
                }
            }
        });
        return merge(state, cookieState, {
            clone: false,
            arrayMerge: (initial, cookie) => {
                return cookie;
            },
        });
    }
    getKey(key) {
        return `${this.prefix}${key}`;
    }
    getIndex() {
        return JSON.parse(Cookies.get(PersistCookieStorage.indexKey) || '{}');
    }
    addToIndex(key) {
        const index = this.getIndex();
        index[this.getKey(key)] = key;
        Cookies.set(PersistCookieStorage.indexKey, JSON.stringify(index), this.options.cookieOptions);
    }
    removeFromIndex(key) {
        const index = this.getIndex();
        delete index[this.getKey(key)];
        Cookies.set(PersistCookieStorage.indexKey, JSON.stringify(index), this.options.cookieOptions);
    }
    clear() {
        const index = this.getIndex();
        Object.keys(index).forEach((key) => {
            this.removeItem(index[key]);
        });
        Cookies.remove(PersistCookieStorage.indexKey);
    }
    getItem(key) {
        return Cookies.get(this.getKey(key));
    }
    key(index) {
        return undefined;
    }
    removeItem(key) {
        this.removeFromIndex(key);
        Cookies.remove(this.getKey(key));
    }
    setItem(key, data) {
        this.addToIndex(key);
        Cookies.set(this.getKey(key), data, this.options.cookieOptions);
    }
    beforePersist(state) {
        if (this.options.beforePersist) {
            return this.options.beforePersist(state);
        }
        return state;
    }
}
PersistCookieStorage.indexKey = 'vuexpersistcookie';
exports.PersistCookieStorage = PersistCookieStorage;
