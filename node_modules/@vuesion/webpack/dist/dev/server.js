"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const ui_1 = require("@vuesion/utils/dist/ui");
const models_1 = require("@vuesion/models");
const path = require('path');
const webpack = require('webpack');
const MFS = require('memory-fs');
const clientConfig = nodeRequire('@vuesion/webpack/dist/config/client').default;
const isomorphicConfig = nodeRequire('@vuesion/webpack/dist/config/isomorphic').default;
let initialized = false;
let devMiddleware;
let clientCompiler;
let bundle;
let template;
exports.default = (app, callback) => {
    /**
     * Code for hot-reloading
     * ----------------------
     * The dev server and the webpack compilers should just be initialized once.
     * But the middlewares have to be applied every time a new app is loaded.
     */
    if (initialized) {
        app.use(devMiddleware);
        app.use(require('webpack-hot-middleware')(clientCompiler));
        if (bundle && template) {
            callback(bundle, template);
        }
        return;
    }
    clientConfig.entry = ['webpack-hot-middleware/client', clientConfig.entry.app];
    clientConfig.output.filename = '[name].js';
    clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin());
    clientConfig.mode = 'development';
    clientCompiler = webpack(clientConfig);
    devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
        publicPath: clientConfig.output.publicPath,
        stats: __1.statsSettings,
        watchOptions: (models_1.VuesionConfig.devServer && models_1.VuesionConfig.devServer.watchOptions) || {
            aggregateTimeout: 300,
            poll: false,
        },
    });
    app.use(devMiddleware);
    clientCompiler.hooks.done.tap('dev-server', () => {
        const fs = devMiddleware.fileSystem;
        const templatePath = path.join(clientConfig.output.path, 'index.html');
        if (fs.existsSync(templatePath)) {
            template = fs.readFileSync(templatePath, 'utf-8');
            if (bundle) {
                callback(bundle, template);
            }
        }
    });
    app.use(require('webpack-hot-middleware')(clientCompiler));
    isomorphicConfig.mode = 'development';
    const serverCompiler = webpack(isomorphicConfig);
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
        if (err) {
            throw err;
        }
        const jsonStats = stats.toJson();
        if (jsonStats.hasErrors) {
            jsonStats.errors.forEach((error) => ui_1.logError(error));
            throw new Error(`Build failed with errors.`);
        }
        if (jsonStats.hasWarnings) {
            jsonStats.warnings.forEach((warning) => ui_1.logWarning(warning));
        }
        const bundlePath = path.join(isomorphicConfig.output.path, 'vue-ssr-bundle.json');
        bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'));
        if (template) {
            callback(bundle, template);
        }
    });
    initialized = true;
};
