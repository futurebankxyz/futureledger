"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = require("webpack");
const utils_1 = require("./utils");
const path_1 = require("@vuesion/utils/dist/path");
const models_1 = require("@vuesion/models");
const { VueLoaderPlugin } = require('vue-loader');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
exports.base = {
    stats: utils_1.statsSettings,
    devtool: utils_1.isProd ? false : '#eval-source-map',
    resolve: {
        extensions: ['.ts', '.js', '.vue', '.json', '.node'],
        modules: [
            path_1.runtimeRoot('src'),
            path_1.runtimeRoot('node_modules'),
            path_1.packagesRoot('service', 'node_modules'),
            path_1.packagesRoot('service', 'src/webpack/dev'),
        ],
        alias: {
            vue$: 'vue/dist/vue.esm.js',
            '@': path_1.runtimeRoot('src'),
        },
    },
    module: {
        exprContextCritical: false,
        rules: [
            {
                test: /\.ts$/,
                loader: 'ts-loader',
                include: [path_1.runtimeRoot('src'), path_1.packagesRoot('service', 'src/webpack/dev')],
                exclude: /node_modules/,
                options: {
                    appendTsSuffixTo: [/\.vue$/],
                    transpileOnly: true,
                },
            },
            {
                test: /\.vue$/,
                loader: 'vue-loader',
            },
            {
                test: /\.scss$/,
                oneOf: [
                    {
                        resourceQuery: /module/,
                        use: [
                            'vue-style-loader',
                            {
                                loader: 'css-loader',
                                options: {
                                    modules: true,
                                },
                            },
                            {
                                loader: 'postcss-loader',
                                options: {
                                    ident: 'postcss',
                                    plugins: () => [
                                        require('autoprefixer')(),
                                        require('css-mqpacker')(),
                                        require('cssnano')({
                                            preset: [
                                                'default',
                                                {
                                                    discardComments: {
                                                        removeAll: true,
                                                    },
                                                    zindex: false,
                                                    normalizeWhitespace: utils_1.isProd,
                                                },
                                            ],
                                        }),
                                    ],
                                },
                            },
                            'sass-loader',
                        ],
                    },
                    {
                        use: [
                            'vue-style-loader',
                            'css-loader',
                            {
                                loader: 'postcss-loader',
                                options: {
                                    ident: 'postcss',
                                    plugins: () => [
                                        require('autoprefixer')(),
                                        require('css-mqpacker')(),
                                        require('cssnano')({
                                            preset: [
                                                'default',
                                                {
                                                    discardComments: {
                                                        removeAll: true,
                                                    },
                                                    zindex: false,
                                                    normalizeWhitespace: utils_1.isProd,
                                                },
                                            ],
                                        }),
                                    ],
                                },
                            },
                            'sass-loader',
                        ],
                    },
                ],
            },
            {
                test: /\.(?:jpg|png|svg|ttf|woff2?|eot|ico)$/,
                loader: 'file-loader',
                options: {
                    name: '[name].[ext]?[hash]',
                },
            },
            {
                test: /\.css$/,
                loader: ['vue-style-loader', 'css-loader'],
            },
        ],
    },
    plugins: [
        new VueLoaderPlugin(),
        new webpack.DefinePlugin({ PRODUCTION: utils_1.isProd, DEVELOPMENT: utils_1.isDev, TEST: false, SPA: false }),
        new ForkTsCheckerWebpackPlugin({
            tsconfig: path_1.runtimeRoot('tsconfig.json'),
            tslint: path_1.runtimeRoot('tslint.json'),
            vue: true,
            silent: true,
        }),
    ],
};
if (utils_1.analyze) {
    exports.base.plugins.push(new BundleAnalyzerPlugin({ analyzerMode: 'static' }));
}
const aliases = models_1.VuesionConfig.getWebpackAliases();
if (aliases) {
    Object.keys(aliases).map((alias) => {
        exports.base.resolve.alias[alias] = path_1.runtimeRoot(aliases[alias]);
    });
}
exports.default = models_1.VuesionConfig.getCustomWebpackConfig(exports.base);
