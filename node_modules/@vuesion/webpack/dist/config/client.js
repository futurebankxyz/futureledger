"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = require("webpack");
const utils_1 = require("./utils");
const base_1 = require("./base");
const path_1 = require("@vuesion/utils/dist/path");
const models_1 = require("@vuesion/models");
const HTMLPlugin = require('html-webpack-plugin');
const ServiceWorkerWebpackPlugin = require('serviceworker-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
exports.client = utils_1.merge(base_1.base, {
    name: 'client',
    entry: {
        app: path_1.runtimeRoot('src/client/index'),
    },
    output: {
        path: path_1.runtimeRoot('dist/client'),
        filename: '[name].[chunkHash].js',
        publicPath: '/client/',
        chunkFilename: '[name].[id].[chunkhash].js',
    },
    optimization: {
        splitChunks: {
            cacheGroups: {
                commons: {
                    test: /[\\/]node_modules[\\/]/,
                    name: 'vendor',
                    chunks: 'all',
                },
            },
        },
        runtimeChunk: 'single',
    },
    plugins: [
        new webpack.DefinePlugin({ CLIENT: true, SERVER: false }),
        new HTMLPlugin({ template: path_1.runtimeRoot('src/index.template.html'), spa: false }),
    ],
});
if (utils_1.isProd) {
    exports.client.plugins = (exports.client.plugins || []).concat([
        new ServiceWorkerWebpackPlugin({ entry: path_1.runtimeRoot('src/client/sw.ts') }),
        new CompressionPlugin({ algorithm: 'gzip', test: /\.js$|\.css$|\.html$/, threshold: 0, minRatio: 1 }),
    ]);
}
exports.default = models_1.VuesionConfig.getCustomWebpackConfig(exports.client, 'client');
