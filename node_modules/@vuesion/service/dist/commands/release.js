"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../decorators/command");
const process_1 = require("@vuesion/utils/dist/process");
const ui_1 = require("@vuesion/utils/dist/ui");
let Release = class Release {
    async run(args, options) {
        let npmVersion = 'major';
        if (this.minor) {
            npmVersion = 'minor';
        }
        else if (this.patch) {
            npmVersion = 'patch';
        }
        ui_1.Result(`Releasing new ${npmVersion} version...`);
        try {
            ui_1.logInfo('Generating CHANGELOG.md...');
            await process_1.runProcess('changelog', args, { silent: false, ...options });
            ui_1.logInfo('Adding CHANGELOG.md...');
            await process_1.runProcess('git', ['add', 'CHANGELOG.md'], { silent: false, ...options });
            ui_1.logInfo('Committing changes...');
            await process_1.runProcess('git', ['commit', '-m', 'chore: update changelog'], { silent: false, ...options });
            ui_1.logInfo(`Releasing npm ${npmVersion} version...`);
            await process_1.runProcess('npm', ['version', npmVersion], { silent: false, ...options });
            ui_1.logInfo('Pushing changes...');
            await process_1.runProcess('git', ['push', 'origin'], { silent: false, ...options });
            ui_1.logInfo('Pushing tags...');
            await process_1.runProcess('git', ['push', 'origin', '--tags'], { silent: false, ...options });
            ui_1.log('');
            ui_1.Result('New version released.');
        }
        catch (e) {
            process_1.handleProcessError(e);
        }
    }
};
Release = __decorate([
    command_1.Command({
        name: 'release',
        alias: 'r',
        description: 'Generate changelog, release new npm version add new git tag.',
        options: [
            { flags: '-M, --major', description: 'Release new major version' },
            { flags: '-m, --minor', description: 'Release new minor version' },
            { flags: '-p, --patch', description: 'Release new patch version' },
        ],
    })
], Release);
exports.Release = Release;
