"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const command_1 = require("../decorators/command");
const process_1 = require("@vuesion/utils/dist/process");
const ui_1 = require("@vuesion/utils/dist/ui");
const path_1 = require("@vuesion/utils/dist/path");
const rimraf_1 = require("rimraf");
exports.waitForApp = async (url) => {
    const interval = 500;
    const timeout = 120000;
    let elapsedTime = 0;
    let instance;
    return new Promise((resolve, reject) => {
        instance = setInterval(async () => {
            try {
                await axios_1.default.get(url);
                clearInterval(instance);
                resolve();
            }
            catch (e) {
                elapsedTime += interval;
                if (elapsedTime > timeout) {
                    clearInterval(instance);
                    reject({
                        code: (e && e.response && e.response.status) || 500,
                        trace: `Unable to connect to dev-server.\nTry to open ${url} manually.`,
                    });
                }
            }
        }, interval);
    });
};
const opn = require('open');
let Dev = class Dev {
    async run(args, options) {
        process.env.NODE_ENV = 'development';
        process.env.PORT = this.port;
        const url = `http://localhost:${this.port}`;
        try {
            rimraf_1.sync('./dist');
            ui_1.HeadLine('Start development mode...');
            await process_1.runProcess('node', [
                path_1.packagesRoot('webpack', 'dist/scripts/run-webpack.js'),
                path_1.packagesRoot('webpack', 'dist/config/dev-server.js'),
                'development',
                `${options.debug}`,
            ], options);
            process_1.runProcess('node', [
                path_1.packagesRoot('webpack', 'dist/scripts/run-webpack.js'),
                path_1.packagesRoot('webpack', 'dist/config/server.js'),
                'development',
                `${options.debug}`,
            ], options);
            if (this.open) {
                try {
                    await exports.waitForApp(url);
                    await opn(url, { wait: false });
                }
                catch (e) {
                    ui_1.logInfo(`Dev-server returned status code: ${e.code}.`);
                    ui_1.logInfo(e.trace);
                }
            }
        }
        catch (e) {
            process_1.handleProcessError(e);
        }
    }
};
Dev = __decorate([
    command_1.Command({
        name: 'dev',
        alias: 'd',
        description: 'Serve application for development.',
        options: [
            { flags: '-p, --port <port>', description: 'Web-server port.', defaultValue: '3000' },
            { flags: '-o, --open', description: 'Open the dev environment in your default web browser.' },
        ],
    })
], Dev);
exports.Dev = Dev;
