"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rimraf_1 = require("rimraf");
const command_1 = require("../decorators/command");
const dist_1 = require("@vuesion/models/dist");
const lodash_1 = require("lodash");
let PostInstall = class PostInstall {
    deleteDirectories() {
        ['./.git', './.circleci', './.all-contributorsrc', './CHANGELOG.md', './CODE_OF_CONDUCT.md', './LICENSE'].forEach((glob) => rimraf_1.sync(glob));
    }
    updateVuesionConfig() {
        dist_1.VuesionConfig.updateCurrentVersion(`v${dist_1.VuesionPackage.version}`);
    }
    updateVuesionPackage() {
        dist_1.VuesionPackage.name = lodash_1.kebabCase(lodash_1.lowerCase(this.optionsObject.name));
        dist_1.VuesionPackage.version = '0.0.0';
        dist_1.VuesionPackage.description = 'Created with vuesion.';
        dist_1.VuesionPackage.repository = { type: '', url: '' };
        dist_1.VuesionPackage.keywords = [];
        dist_1.VuesionPackage.author = '';
        dist_1.VuesionPackage.homepage = '';
        dist_1.VuesionPackage.bugs = { url: '' };
        dist_1.VuesionPackage.save(true);
    }
    async run(args, options) {
        this.optionsObject = JSON.parse(this.options);
        this.deleteDirectories();
        this.updateVuesionConfig();
        this.updateVuesionPackage();
    }
};
PostInstall = __decorate([
    command_1.Command({
        name: 'post-install',
        description: 'Separate steps that run after creating a new vuesion app.',
        arguments: [{ name: 'options', required: true }],
    })
], PostInstall);
exports.PostInstall = PostInstall;
