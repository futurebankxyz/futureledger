"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const chalk_1 = require("chalk");
const command_1 = require("../decorators/command");
const inquirer_1 = require("inquirer");
const ui_1 = require("@vuesion/utils/dist/ui");
const process_1 = require("@vuesion/utils/dist/process");
const path_1 = require("@vuesion/utils/dist/path");
const opn = require('open');
let Add = class Add {
    constructor() {
        this.questions = [
            {
                type: 'list',
                name: 'package',
                message: 'Which package do you want to add to your project?',
                choices: ['addon-contentful'],
            },
        ];
    }
    async run(args, options) {
        let result = await inquirer_1.prompt(this.questions);
        const packageName = result.package;
        const dependencyName = `@vuesion/${packageName}`;
        const source = path_1.runtimeRoot(`node_modules/${dependencyName}/template`);
        const destination = path_1.runtimeRoot();
        const spinner = new ui_1.Spinner();
        spinner.message = `Installing ${chalk_1.default.bold(dependencyName)} into your project...`;
        spinner.start();
        try {
            await process_1.runProcess('npm', ['install', '--save', dependencyName], { silent: true, ...options });
        }
        catch (e) {
            spinner.stop();
            process_1.handleProcessError(e);
        }
        if (fs.existsSync(source)) {
            fs.copy(source, destination, async (e) => {
                if (e) {
                    spinner.stop();
                    ui_1.logErrorBold(e);
                }
                else {
                    spinner.message = `Package ${chalk_1.default.bold(dependencyName)} successfully installed`;
                    spinner.stop();
                    this.questions = [
                        {
                            type: 'confirm',
                            name: 'open',
                            message: 'Do you want to open the package documentation?',
                            default: true,
                        },
                    ];
                    result = await inquirer_1.prompt(this.questions);
                    if (result.open) {
                        try {
                            await opn(`https://github.com/vuesion/packages/tree/master/packages/${packageName}`, {
                                wait: false,
                            });
                        }
                        catch (e) {
                            ui_1.logErrorBold(e);
                        }
                    }
                }
            });
        }
    }
};
Add = __decorate([
    command_1.Command({
        name: 'add',
        alias: 'a',
        description: 'Add a vuesion package to your project.',
    })
], Add);
exports.Add = Add;
