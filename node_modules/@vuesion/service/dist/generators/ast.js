"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const ts = require("typescript");
const lodash_1 = require("lodash");
let sourceFile;
const insertAt = (file, index, insert) => {
    return file.substring(0, index) + insert + file.substring(index);
};
const getAST = (file) => {
    sourceFile = ts.createSourceFile('ast', file, ts.ScriptTarget.Latest, true, ts.ScriptKind.TSX);
};
const findAstNodes = (node, kind, recursive = false, max = Infinity) => {
    if (max === 0) {
        return [];
    }
    const arr = [];
    if (node.kind === kind) {
        if (!recursive) {
            return [node];
        }
        arr.push(node);
        max--;
    }
    if (max > 0) {
        for (const child of node.getChildren(sourceFile)) {
            findAstNodes(child, kind, recursive, max).forEach((currentNode) => {
                if (max > 0) {
                    arr.push(currentNode);
                }
                max--;
            });
            if (max <= 0) {
                break;
            }
        }
    }
    return arr;
};
exports.addModuleToRouter = (pathToAppRouter, moduleName, modulePath = '') => {
    moduleName = lodash_1.camelCase(moduleName);
    try {
        let file = fs.readFileSync(pathToAppRouter, 'utf-8');
        getAST(file);
        file = insertAt(file, findAstNodes(sourceFile, ts.SyntaxKind.ArrayLiteralExpression, true).pop().end - 1, `, ...${lodash_1.upperFirst(moduleName)}Routes`);
        file = insertAt(file, findAstNodes(sourceFile, ts.SyntaxKind.ImportDeclaration, true).pop().end, `\nimport { ${lodash_1.upperFirst(moduleName)}Routes } from './${modulePath.length > 0 ? `${modulePath}/` : ''}${lodash_1.lowerFirst(moduleName)}/routes';`);
        fs.writeFileSync(pathToAppRouter, file, { encoding: 'utf-8' });
    }
    catch (e) {
        throw new Error(e);
    }
};
exports.addModuleToState = (pathToAppState, moduleName, modulePath = '') => {
    moduleName = lodash_1.camelCase(moduleName);
    try {
        let file = fs.readFileSync(pathToAppState, 'utf-8');
        getAST(file);
        const interfaces = findAstNodes(sourceFile, ts.SyntaxKind.InterfaceDeclaration, true);
        file = insertAt(file, interfaces.shift().end - 2, `\n  ${lodash_1.lowerFirst(moduleName)}?: I${lodash_1.upperFirst(moduleName)}State;`);
        file = insertAt(file, findAstNodes(sourceFile, ts.SyntaxKind.ImportDeclaration, true).pop().end, `\nimport { I${lodash_1.upperFirst(moduleName)}State } from './${modulePath.length > 0 ? `${modulePath}/` : ''}${lodash_1.lowerFirst(moduleName)}/state';`);
        fs.writeFileSync(pathToAppState, file, { encoding: 'utf-8' });
    }
    catch (e) {
        throw new Error(e);
    }
};
