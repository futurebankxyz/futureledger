"use strict";
const path = require("path");
const models_1 = require("@vuesion/models");
const path_1 = require("@vuesion/utils/dist/path");
const fileSystem_1 = require("@vuesion/utils/dist/fileSystem");
const pluralize = require('pluralize');
module.exports = {
    description: 'Add a VueX connected component',
    prompts: [
        {
            type: 'input',
            name: 'name',
            message: 'What should it be called?',
            validate: (value) => {
                if (!value || value.length === 0) {
                    return 'name is required';
                }
                if (value.indexOf('/') === -1) {
                    return 'a connected component has to live in a module';
                }
                return fileSystem_1.folderExists(path_1.runtimeRoot(path.join(models_1.VuesionConfig.generators.outputDirectory, value)))
                    ? `folder already exists (${value})`
                    : true;
            },
        },
    ],
    actions: (data) => {
        const filePath = data.name.split('/');
        const componentName = filePath.pop();
        const moduleName = filePath.pop();
        const singularName = moduleName.slice(-1).toLocaleLowerCase() === 's' ? moduleName.slice(0, -1) : moduleName;
        const pluralName = pluralize(singularName);
        data.moduleName = singularName;
        data.singularName = singularName;
        data.pluralName = pluralName;
        data.modulePath = filePath.join('/');
        data.componentName = componentName;
        data.basePath = path.join(process.cwd(), models_1.VuesionConfig.generators.outputDirectory, filePath.join('/'));
        data.wantVuex = true;
        return [
            {
                type: 'add',
                path: '{{basePath}}/{{camelCase moduleName}}/{{properCase componentName}}/{{properCase componentName}}.vue',
                templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'connected/connected.vue.hbs'),
                abortOnFail: true,
            },
            {
                type: 'add',
                path: '{{basePath}}/{{camelCase moduleName}}/{{properCase componentName}}/{{properCase componentName}}.spec.ts',
                templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'connected/connected.spec.ts.hbs'),
                abortOnFail: true,
            },
        ];
    },
};
