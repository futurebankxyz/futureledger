"use strict";
const path = require("path");
const ast_1 = require("../ast");
const models_1 = require("@vuesion/models");
const path_1 = require("@vuesion/utils/dist/path");
const fileSystem_1 = require("@vuesion/utils/dist/fileSystem");
const pluralize = require('pluralize');
module.exports = {
    description: 'Add a module with VueX store and routes',
    prompts: [
        {
            type: 'input',
            name: 'name',
            message: 'What should it be called?',
            validate: (value) => {
                if (!value || value.length === 0) {
                    return 'name is required';
                }
                value = value.slice(-1).toLocaleLowerCase() === 's' ? value.slice(0, -1) : value;
                return fileSystem_1.folderExists(path_1.runtimeRoot(path.join(models_1.VuesionConfig.generators.outputDirectory, value)))
                    ? `folder already exists (${value})`
                    : true;
            },
        },
        {
            type: 'confirm',
            name: 'wantRoutes',
            default: true,
            message: 'Do you want routes?',
        },
        {
            type: 'confirm',
            name: 'wantVuex',
            default: true,
            message: 'Do you want vuex?',
        },
    ],
    actions: (data) => {
        const filePath = data.name.split('/');
        const moduleName = filePath.pop();
        const singularName = moduleName.slice(-1).toLocaleLowerCase() === 's' ? moduleName.slice(0, -1) : moduleName;
        const pluralName = pluralize(singularName);
        data.moduleName = singularName;
        data.singularName = singularName;
        data.pluralName = pluralName;
        data.modulePath = filePath.join('/');
        data.componentName = data.singularName;
        data.basePath = path.join(process.cwd(), models_1.VuesionConfig.generators.outputDirectory, filePath.join('/'));
        let actions = [
            {
                type: 'add',
                path: '{{basePath}}/{{camelCase singularName}}/{{properCase componentName}}/{{properCase componentName}}.vue',
                templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'connected/connected.vue.hbs'),
                abortOnFail: true,
            },
            {
                type: 'add',
                path: '{{basePath}}/{{camelCase singularName}}/{{properCase componentName}}/{{properCase componentName}}.spec.ts',
                templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'connected/connected.spec.ts.hbs'),
                abortOnFail: true,
            },
        ];
        if (data.wantRoutes) {
            actions.push({
                type: 'add',
                path: '{{basePath}}/{{camelCase singularName}}/routes.ts',
                templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/routes.ts.hbs'),
                abortOnFail: true,
            });
            ast_1.addModuleToRouter(path.join(path.resolve(process.cwd()), models_1.VuesionConfig.generators.routerFile), data.singularName, data.modulePath);
        }
        if (data.wantVuex) {
            actions = actions.concat([
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/actions.spec.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/actions.spec.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/actions.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/actions.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/getters.spec.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/getters.spec.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/getters.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/getters.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/module.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/module.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/mutations.spec.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/mutations.spec.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/mutations.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/mutations.ts.hbs'),
                    abortOnFail: true,
                },
                {
                    type: 'add',
                    path: '{{basePath}}/{{camelCase singularName}}/state.ts',
                    templateFile: path.join(process.cwd(), models_1.VuesionConfig.generators.blueprintDirectory, 'module/state.ts.hbs'),
                    abortOnFail: true,
                },
            ]);
            ast_1.addModuleToState(path.join(path.resolve(process.cwd()), models_1.VuesionConfig.generators.stateFile), data.singularName, data.modulePath);
        }
        return actions;
    },
};
