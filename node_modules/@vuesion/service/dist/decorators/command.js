"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:only-arrow-functions */
const commander = require("commander");
const getCommand = (args) => {
    const max = args.length;
    let command = null;
    for (let i = 0; i < max; i++) {
        if (args[i].parent) {
            command = args[i];
            break;
        }
    }
    return command;
};
const getOptions = (obj) => {
    const result = [];
    for (const property in obj) {
        if (obj.hasOwnProperty(property) &&
            !property.startsWith('_') &&
            ['commands', 'options', 'parent'].indexOf(property) === -1) {
            result.push(property);
        }
    }
    return result;
};
function Command(meta) {
    meta = Object.assign({ alias: null, options: [], arguments: [] }, meta);
    return (Target) => {
        const target = new Target();
        const isChildCommand = meta.name !== undefined;
        const command = isChildCommand ? commander.command(meta.name) : commander;
        command.allowUnknownOption();
        if (meta.alias) {
            command.alias(meta.alias);
        }
        if (meta.description) {
            command.description(meta.description);
        }
        meta.options.forEach((option) => {
            if (option.formatter) {
                command.option(option.flags, option.description, option.formatter, option.defaultValue);
            }
            else {
                command.option(option.flags, option.description, option.defaultValue);
            }
        });
        meta.arguments.forEach((arg) => {
            if (arg.required) {
                command.arguments(`<${arg.name}>`);
            }
            else {
                command.arguments(`[${arg.name}]`);
            }
        });
        command.action(function () {
            const hasArgs = meta.arguments.length > 0;
            const localCommand = isChildCommand ? getCommand(arguments) : command;
            const options = getOptions(localCommand);
            const args = isChildCommand ? localCommand.parent.rawArgs.splice(3) : localCommand.rawArgs.splice(3);
            const debug = localCommand.parent ? !!localCommand.parent.debug : !!localCommand.debug;
            options.forEach((option) => (target[option] = localCommand[option]));
            if (hasArgs) {
                meta.arguments.forEach((arg, idx) => {
                    target[arg.name] = arguments[idx] ? arguments[idx] : arg.defaultValue;
                });
            }
            target.run(args.filter((arg) => ['--debug'].indexOf(arg) === -1), { debug });
        });
        return target;
    };
}
exports.Command = Command;
