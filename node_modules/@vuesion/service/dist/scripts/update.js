"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const fs = require("fs");
const https = require("https");
const path_1 = require("@vuesion/utils/dist/path");
const fileSystem_1 = require("@vuesion/utils/dist/fileSystem");
const ui_1 = require("@vuesion/utils/dist/ui");
const models_1 = require("@vuesion/models");
const vuesionRepo = 'https://api.github.com/repos/vuesion/vuesion';
const deleteFile = (status, filePath) => {
    try {
        fs.unlinkSync(filePath);
        ui_1.logError(`${status}: ${filePath}`);
    }
    catch (e) {
        ui_1.logErrorBold(e.message);
    }
};
const renameFile = (status, oldPath, newPath) => {
    try {
        fs.renameSync(oldPath, newPath);
        ui_1.logInfoBold(`${status}: ${oldPath} --> ${newPath}`);
    }
    catch (e) {
        ui_1.logErrorBold(e.message);
    }
};
const downloadFile = (status, filePath, url) => {
    fileSystem_1.ensureDirectoryExists(filePath);
    const file = fs.createWriteStream(filePath);
    const done = () => {
        switch (status) {
            case 'added':
                ui_1.logSuccess(`${status}: ${filePath}`);
                break;
            case 'modified':
                ui_1.log(`${status}: ${filePath}`);
                break;
            default:
                ui_1.log(`${status}: ${filePath}`);
        }
    };
    https
        .get(url, (response) => {
        response.pipe(file);
        file.on('finish', () => {
            file.close();
            done();
        });
    })
        .on('error', () => {
        deleteFile(status, filePath);
    });
};
const handleFiles = (diffFiles) => {
    diffFiles.forEach((diffFile) => {
        const dest = path_1.runtimeRoot(diffFile.filename);
        const url = `https://raw.githubusercontent.com/vuesion/vuesion/master/${diffFile.filename}`;
        if (diffFile.status === 'removed') {
            deleteFile(diffFile.status, dest);
        }
        else if (diffFile.status === 'renamed') {
            renameFile(diffFile.status, path_1.runtimeRoot(diffFile.previous_filename), dest);
        }
        else {
            downloadFile(diffFile.status, dest, url);
        }
    });
};
async function run() {
    try {
        const tagsResponse = await axios_1.default.get(`${vuesionRepo}/tags`);
        const latestVersion = tagsResponse.data[0].name;
        const currentVersion = models_1.VuesionConfig.currentVersion;
        if (latestVersion === currentVersion) {
            ui_1.Result(`Your project is up to date (Version: ${currentVersion}).`);
            return;
        }
        ui_1.Result(`Update from version: ${currentVersion} to version: ${latestVersion}.`);
        const diffResponse = await axios_1.default.get(`${vuesionRepo}/compare/${currentVersion}...${latestVersion}`);
        handleFiles(diffResponse.data.files);
        setTimeout(() => {
            models_1.VuesionConfig.load();
            models_1.VuesionConfig.updateCurrentVersion(latestVersion);
        }, 200);
    }
    catch (e) {
        ui_1.logErrorBold(e);
    }
}
exports.run = run;
