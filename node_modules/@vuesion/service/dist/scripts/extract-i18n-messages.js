"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const glob = require("glob");
const fs = require("fs");
const path = require("path");
const Utils_1 = require("./Utils");
const models_1 = require("@vuesion/models");
const ui_1 = require("@vuesion/utils/dist/ui");
const fileSystem_1 = require("@vuesion/utils/dist/fileSystem");
exports.run = () => {
    glob('./src/app/**/*.vue', (err, files) => {
        const basePath = path.resolve(process.cwd());
        const supportedLocales = models_1.VuesionConfig.i18n.supportedLocales;
        const defaultLocale = models_1.VuesionConfig.i18n.defaultLocale;
        let translations = {};
        ui_1.HeadLine('Scanning files in: ./src/app/**/*.vue.');
        ui_1.log('');
        /**
         * go through all *.vue files end extract the translation object $t('foo') -> {id: 'foo'}
         */
        files.forEach((file) => {
            const content = fs.readFileSync(file).toString();
            const matches = Utils_1.getTranslationsFromString(content);
            if (matches) {
                translations = { ...translations, ...Utils_1.getTranslationObject(matches) };
            }
        });
        /**
         * analyze and write languages files
         */
        supportedLocales.forEach((locale) => {
            const i18nFilePath = path.join(basePath, 'i18n', `${locale}.json`);
            const i18nFileContent = fs.existsSync(i18nFilePath) ? fs.readFileSync(i18nFilePath).toString() : null;
            const i18nFileObject = i18nFileContent ? JSON.parse(i18nFileContent) : {};
            Object.keys(i18nFileObject).forEach((key) => {
                i18nFileObject[key] = i18nFileObject[key].replace(/\n/g, '\\n').replace(/"/g, '\\"');
            });
            const newI18nObject = locale === defaultLocale
                ? Object.assign({}, i18nFileObject, translations)
                : Object.assign({}, translations, i18nFileObject);
            /**
             * sort entries
             */
            const sortedKeys = Object.keys(newI18nObject).sort();
            const sortedEntries = sortedKeys.map((key) => {
                return `"${key}": "${newI18nObject[key]}"`;
            });
            fileSystem_1.ensureDirectoryExists(i18nFilePath);
            fs.writeFileSync(i18nFilePath, `{\n  ${sortedEntries.join(',\n  ')}\n}\n`);
            ui_1.log(`Updated: ./i18n/${locale}.json.`);
        });
        ui_1.log('');
        ui_1.Result('I18n extraction finished.');
    });
};
